// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: novonotes/audio_engine/v1alpha1/type/body_type.proto
// Protobuf C++ Version: 5.28.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2ftype_2fbody_5ftype_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2ftype_2fbody_5ftype_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_novonotes_2faudio_5fengine_2fv1alpha1_2ftype_2fbody_5ftype_2eproto

namespace google
{
namespace protobuf
{
namespace internal
{
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct
    TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2ftype_2fbody_5ftype_2eproto
{
    static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_novonotes_2faudio_5fengine_2fv1alpha1_2ftype_2fbody_5ftype_2eproto;
namespace google
{
namespace protobuf
{}  // namespace protobuf
}  // namespace google

namespace novonotes
{
namespace audio_engine
{
namespace v1alpha1
{
namespace type
{
enum BodyType : int
{
    BODY_TYPE_HANDSHAKE = 0,
    BODY_TYPE_CREATE_AUDIO_REGION_REQUEST = 31,
    BODY_TYPE_CREATE_AUDIO_REGION_RESPONSE = 32,
    BODY_TYPE_UPDATE_AUDIO_REGION_REQUEST = 33,
    BODY_TYPE_UPDATE_AUDIO_REGION_RESPONSE = 34,
    BODY_TYPE_DELETE_AUDIO_REGION_REQUEST = 35,
    BODY_TYPE_DELETE_AUDIO_REGION_RESPONSE = 36,
    BODY_TYPE_CREATE_TRACK_REQUEST = 37,
    BODY_TYPE_CREATE_TRACK_RESPONSE = 38,
    BODY_TYPE_UPDATE_TRACK_REQUEST = 39,
    BODY_TYPE_UPDATE_TRACK_RESPONSE = 40,
    BODY_TYPE_DELETE_TRACK_REQUEST = 41,
    BODY_TYPE_DELETE_TRACK_RESPONSE = 42,
    BODY_TYPE_CONNECT_REQUEST = 43,
    BODY_TYPE_CONNECT_RESPONSE = 44,
    BODY_TYPE_DISCONNECT_REQUEST = 45,
    BODY_TYPE_DISCONNECT_RESPONSE = 46,
    BODY_TYPE_DEBUG_STATE_REQUEST = 47,
    BODY_TYPE_DEBUG_STATE_RESPONSE = 48,
    BODY_TYPE_SAVE_STATE_REQUEST = 49,
    BODY_TYPE_SAVE_STATE_RESPONSE = 50,
    BODY_TYPE_CREATE_DEVICE_INSTANCE_REQUEST = 51,
    BODY_TYPE_CREATE_DEVICE_INSTANCE_RESPONSE = 52,
    BODY_TYPE_DELETE_DEVICE_INSTANCE_REQUEST = 55,
    BODY_TYPE_DELETE_DEVICE_INSTANCE_RESPONSE = 56,
    BODY_TYPE_INITIALIZE_REQUEST = 57,
    BODY_TYPE_INITIALIZE_RESPONSE = 58,
    BODY_TYPE_SHUTDOWN_REQUEST = 61,
    BODY_TYPE_SHUTDOWN_RESPONSE = 62,
    BODY_TYPE_START_PLAYBACK_REQUEST = 63,
    BODY_TYPE_START_PLAYBACK_RESPONSE = 64,
    BODY_TYPE_STOP_PLAYBACK_REQUEST = 65,
    BODY_TYPE_STOP_PLAYBACK_RESPONSE = 66,
    BODY_TYPE_UPDATE_TRANSPORT_REQUEST = 67,
    BODY_TYPE_UPDATE_TRANSPORT_RESPONSE = 68,
    BODY_TYPE_START_PLAYHEAD_POSITION_STREAM_REQUEST = 69,
    BODY_TYPE_START_PLAYHEAD_POSITION_STREAM_RESPONSE = 70,
    BODY_TYPE_STOP_PLAYHEAD_POSITION_STREAM_REQUEST = 71,
    BODY_TYPE_STOP_PLAYHEAD_POSITION_STREAM_RESPONSE = 72,
    BODY_TYPE_RT_PLAYHEAD_POSITION = 73,
    BODY_TYPE_PLAY_TEST_TONE_REQUEST = 74,
    BODY_TYPE_PLAY_TEST_TONE_RESPONSE = 75,
    BODY_TYPE_START_PARAMETER_SYNC_REQUEST = 76,
    BODY_TYPE_START_PARAMETER_SYNC_RESPONSE = 77,
    BODY_TYPE_STOP_PARAMETER_SYNC_REQUEST = 78,
    BODY_TYPE_STOP_PARAMETER_SYNC_RESPONSE = 79,
    BODY_TYPE_RT_UPDATE_PARAMETER_COMMAND = 80,
    BODY_TYPE_RT_FINALIZE_PARAMETER_COMMAND = 81,
    BODY_TYPE_RT_PARAMETER = 82,
    BODY_TYPE_START_RT_SESSION_REQUEST = 83,
    BODY_TYPE_START_RT_SESSION_RESPONSE = 84,
    BODY_TYPE_STOP_RT_SESSION_REQUEST = 85,
    BODY_TYPE_STOP_RT_SESSION_RESPONSE = 86,
    BODY_TYPE_LIST_DEVICE_DESCRIPTORS_REQUEST = 87,
    BODY_TYPE_LIST_DEVICE_DESCRIPTORS_RESPONSE = 88,
    BODY_TYPE_GET_DEVICE_INSTANCE_REQUEST = 89,
    BODY_TYPE_GET_DEVICE_INSTANCE_RESPONSE = 90,
    BODY_TYPE_SUBSCRIBE_TO_DEVICE_INSTANCE_UPDATES_REQUEST = 91,
    BODY_TYPE_SUBSCRIBE_TO_DEVICE_INSTANCE_UPDATES_RESPONSE = 92,
    BODY_TYPE_RESTORE_DEVICE_INSTANCE_STATE_REQUEST = 93,
    BODY_TYPE_RESTORE_DEVICE_INSTANCE_STATE_RESPONSE = 94,
    BODY_TYPE_SET_PARAMETER_VALUE_REQUEST = 95,
    BODY_TYPE_SET_PARAMETER_VALUE_RESPONSE = 96,
    BODY_TYPE_BATCH_SET_PARAMETER_VALUES_REQUEST = 97,
    BODY_TYPE_BATCH_SET_PARAMETER_VALUES_RESPONSE = 98,
    BODY_TYPE_EXECUTE_DEVICE_SPECIFIC_COMMAND_REQUEST = 99,
    BODY_TYPE_EXECUTE_DEVICE_SPECIFIC_COMMAND_RESPONSE = 100,
    BODY_TYPE_RESET_STATE_REQUEST = 101,
    BODY_TYPE_RESET_STATE_RESPONSE = 102,
    BODY_TYPE_ENGINE_ERROR = 1001,
    BodyType_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::min(),
    BodyType_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::max(),
};

bool BodyType_IsValid(int value);
extern const uint32_t BodyType_internal_data_[];
constexpr BodyType BodyType_MIN = static_cast<BodyType>(0);
constexpr BodyType BodyType_MAX = static_cast<BodyType>(1001);
constexpr int BodyType_ARRAYSIZE = 1001 + 1;
const ::google::protobuf::EnumDescriptor* BodyType_descriptor();
template <typename T>
const std::string& BodyType_Name(T value)
{
    static_assert(
        std::is_same<T, BodyType>::value || std::is_integral<T>::value,
        "Incorrect type passed to BodyType_Name().");
    return ::google::protobuf::internal::NameOfEnum(BodyType_descriptor(),
                                                    value);
}
inline bool BodyType_Parse(absl::string_view name, BodyType* value)
{
    return ::google::protobuf::internal::ParseNamedEnum<BodyType>(
        BodyType_descriptor(), name, value);
}

// ===================================================================

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace v1alpha1
}  // namespace audio_engine
}  // namespace novonotes

namespace google
{
namespace protobuf
{

template <>
struct is_proto_enum<::novonotes::audio_engine::v1alpha1::type::BodyType>
    : std::true_type
{};
template <>
inline const EnumDescriptor*
GetEnumDescriptor<::novonotes::audio_engine::v1alpha1::type::BodyType>()
{
    return ::novonotes::audio_engine::v1alpha1::type::BodyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2ftype_2fbody_5ftype_2eproto_2epb_2eh
