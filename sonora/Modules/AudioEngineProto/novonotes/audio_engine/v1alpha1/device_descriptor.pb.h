// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: novonotes/audio_engine/v1alpha1/device_descriptor.proto
// Protobuf C++ Version: 5.28.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/api/resource.pb.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto

namespace google
{
namespace protobuf
{
namespace internal
{
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct
    TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto
{
    static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto;
namespace novonotes
{
namespace audio_engine
{
namespace v1alpha1
{
class DeviceDescriptor;
struct DeviceDescriptorDefaultTypeInternal;
extern DeviceDescriptorDefaultTypeInternal _DeviceDescriptor_default_instance_;
class ListDeviceDescriptorsRequest;
struct ListDeviceDescriptorsRequestDefaultTypeInternal;
extern ListDeviceDescriptorsRequestDefaultTypeInternal
    _ListDeviceDescriptorsRequest_default_instance_;
class ListDeviceDescriptorsResponse;
struct ListDeviceDescriptorsResponseDefaultTypeInternal;
extern ListDeviceDescriptorsResponseDefaultTypeInternal
    _ListDeviceDescriptorsResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace audio_engine
}  // namespace novonotes
namespace google
{
namespace protobuf
{}  // namespace protobuf
}  // namespace google

namespace novonotes
{
namespace audio_engine
{
namespace v1alpha1
{

// ===================================================================

// -------------------------------------------------------------------

class ListDeviceDescriptorsRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsRequest)
 */
{
   public:
    inline ListDeviceDescriptorsRequest()
        : ListDeviceDescriptorsRequest(nullptr)
    {}
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR ListDeviceDescriptorsRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline ListDeviceDescriptorsRequest(
        const ListDeviceDescriptorsRequest& from)
        : ListDeviceDescriptorsRequest(nullptr, from)
    {}
    inline ListDeviceDescriptorsRequest(
        ListDeviceDescriptorsRequest&& from) noexcept
        : ListDeviceDescriptorsRequest(nullptr, std::move(from))
    {}
    inline ListDeviceDescriptorsRequest& operator=(
        const ListDeviceDescriptorsRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ListDeviceDescriptorsRequest& operator=(
        ListDeviceDescriptorsRequest&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const ListDeviceDescriptorsRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const ListDeviceDescriptorsRequest*
    internal_default_instance()
    {
        return reinterpret_cast<const ListDeviceDescriptorsRequest*>(
            &_ListDeviceDescriptorsRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;
    friend void swap(ListDeviceDescriptorsRequest& a,
                     ListDeviceDescriptorsRequest& b)
    {
        a.Swap(&b);
    }
    inline void Swap(ListDeviceDescriptorsRequest* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ListDeviceDescriptorsRequest* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ListDeviceDescriptorsRequest* New(
        ::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL
    {
        return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<
            ListDeviceDescriptorsRequest>(arena);
    }
    using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
    inline void CopyFrom(const ListDeviceDescriptorsRequest& from)
    {
        ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
    }
    using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
    void MergeFrom(const ListDeviceDescriptorsRequest& from)
    {
        ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
    }

   public:
    bool IsInitialized() const { return true; }

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsRequest";
    }

   protected:
    explicit ListDeviceDescriptorsRequest(::google::protobuf::Arena* arena);
    ListDeviceDescriptorsRequest(::google::protobuf::Arena* arena,
                                 const ListDeviceDescriptorsRequest& from);
    ListDeviceDescriptorsRequest(::google::protobuf::Arena* arena,
                                 ListDeviceDescriptorsRequest&& from) noexcept
        : ListDeviceDescriptorsRequest(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::internal::ZeroFieldsBase::ClassData*
    GetClassData() const PROTOBUF_FINAL;
    static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull
        _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsRequest)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 0, 0, 0, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_ListDeviceDescriptorsRequest_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const ListDeviceDescriptorsRequest& from_msg);
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class DeviceDescriptor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.DeviceDescriptor)
 */
{
   public:
    inline DeviceDescriptor() : DeviceDescriptor(nullptr) {}
    ~DeviceDescriptor() PROTOBUF_FINAL;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR DeviceDescriptor(
        ::google::protobuf::internal::ConstantInitialized);

    inline DeviceDescriptor(const DeviceDescriptor& from)
        : DeviceDescriptor(nullptr, from)
    {}
    inline DeviceDescriptor(DeviceDescriptor&& from) noexcept
        : DeviceDescriptor(nullptr, std::move(from))
    {}
    inline DeviceDescriptor& operator=(const DeviceDescriptor& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline DeviceDescriptor& operator=(DeviceDescriptor&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const DeviceDescriptor& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const DeviceDescriptor* internal_default_instance()
    {
        return reinterpret_cast<const DeviceDescriptor*>(
            &_DeviceDescriptor_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;
    friend void swap(DeviceDescriptor& a, DeviceDescriptor& b) { a.Swap(&b); }
    inline void Swap(DeviceDescriptor* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DeviceDescriptor* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    DeviceDescriptor* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::Message::DefaultConstruct<DeviceDescriptor>(
            arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const DeviceDescriptor& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const DeviceDescriptor& from)
    {
        DeviceDescriptor::MergeImpl(*this, from);
    }

   private:
    static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                          const ::google::protobuf::MessageLite& from_msg);

   public:
    bool IsInitialized() const { return true; }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
   private:
    static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
    static ::uint8_t* _InternalSerialize(
        const MessageLite& msg, ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream);

   public:
    ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const
    {
        return _InternalSerialize(*this, target, stream);
    }
#else   // PROTOBUF_CUSTOM_VTABLE
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(DeviceDescriptor* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.DeviceDescriptor";
    }

   protected:
    explicit DeviceDescriptor(::google::protobuf::Arena* arena);
    DeviceDescriptor(::google::protobuf::Arena* arena,
                     const DeviceDescriptor& from);
    DeviceDescriptor(::google::protobuf::Arena* arena,
                     DeviceDescriptor&& from) noexcept
        : DeviceDescriptor(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const
        PROTOBUF_FINAL;
    static const ::google::protobuf::Message::ClassDataFull _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int
    {
        kDeviceTypeIdFieldNumber = 1,
        kDisplayNameFieldNumber = 2,
        kPluginFormatNameFieldNumber = 3,
        kManufacturerNameFieldNumber = 5,
        kVersionFieldNumber = 6,
    };
    // string device_type_id = 1;
    void clear_device_type_id();
    const std::string& device_type_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_device_type_id(Arg_&& arg, Args_... args);
    std::string* mutable_device_type_id();
    PROTOBUF_NODISCARD std::string* release_device_type_id();
    void set_allocated_device_type_id(std::string* value);

   private:
    const std::string& _internal_device_type_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_type_id(
        const std::string& value);
    std::string* _internal_mutable_device_type_id();

   public:
    // string display_name = 2;
    void clear_display_name();
    const std::string& display_name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_display_name(Arg_&& arg, Args_... args);
    std::string* mutable_display_name();
    PROTOBUF_NODISCARD std::string* release_display_name();
    void set_allocated_display_name(std::string* value);

   private:
    const std::string& _internal_display_name() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
        const std::string& value);
    std::string* _internal_mutable_display_name();

   public:
    // string plugin_format_name = 3;
    void clear_plugin_format_name();
    const std::string& plugin_format_name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_plugin_format_name(Arg_&& arg, Args_... args);
    std::string* mutable_plugin_format_name();
    PROTOBUF_NODISCARD std::string* release_plugin_format_name();
    void set_allocated_plugin_format_name(std::string* value);

   private:
    const std::string& _internal_plugin_format_name() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_plugin_format_name(
        const std::string& value);
    std::string* _internal_mutable_plugin_format_name();

   public:
    // string manufacturer_name = 5;
    void clear_manufacturer_name();
    const std::string& manufacturer_name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_manufacturer_name(Arg_&& arg, Args_... args);
    std::string* mutable_manufacturer_name();
    PROTOBUF_NODISCARD std::string* release_manufacturer_name();
    void set_allocated_manufacturer_name(std::string* value);

   private:
    const std::string& _internal_manufacturer_name() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer_name(
        const std::string& value);
    std::string* _internal_mutable_manufacturer_name();

   public:
    // string version = 6;
    void clear_version();
    const std::string& version() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_version(Arg_&& arg, Args_... args);
    std::string* mutable_version();
    PROTOBUF_NODISCARD std::string* release_version();
    void set_allocated_version(std::string* value);

   private:
    const std::string& _internal_version() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
        const std::string& value);
    std::string* _internal_mutable_version();

   public:
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.DeviceDescriptor)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 125, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_DeviceDescriptor_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const DeviceDescriptor& from_msg);
        ::google::protobuf::internal::ArenaStringPtr device_type_id_;
        ::google::protobuf::internal::ArenaStringPtr display_name_;
        ::google::protobuf::internal::ArenaStringPtr plugin_format_name_;
        ::google::protobuf::internal::ArenaStringPtr manufacturer_name_;
        ::google::protobuf::internal::ArenaStringPtr version_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto;
};
// -------------------------------------------------------------------

class ListDeviceDescriptorsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse)
 */
{
   public:
    inline ListDeviceDescriptorsResponse()
        : ListDeviceDescriptorsResponse(nullptr)
    {}
    ~ListDeviceDescriptorsResponse() PROTOBUF_FINAL;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR ListDeviceDescriptorsResponse(
        ::google::protobuf::internal::ConstantInitialized);

    inline ListDeviceDescriptorsResponse(
        const ListDeviceDescriptorsResponse& from)
        : ListDeviceDescriptorsResponse(nullptr, from)
    {}
    inline ListDeviceDescriptorsResponse(
        ListDeviceDescriptorsResponse&& from) noexcept
        : ListDeviceDescriptorsResponse(nullptr, std::move(from))
    {}
    inline ListDeviceDescriptorsResponse& operator=(
        const ListDeviceDescriptorsResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ListDeviceDescriptorsResponse& operator=(
        ListDeviceDescriptorsResponse&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const ListDeviceDescriptorsResponse& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const ListDeviceDescriptorsResponse*
    internal_default_instance()
    {
        return reinterpret_cast<const ListDeviceDescriptorsResponse*>(
            &_ListDeviceDescriptorsResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;
    friend void swap(ListDeviceDescriptorsResponse& a,
                     ListDeviceDescriptorsResponse& b)
    {
        a.Swap(&b);
    }
    inline void Swap(ListDeviceDescriptorsResponse* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ListDeviceDescriptorsResponse* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ListDeviceDescriptorsResponse* New(
        ::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL
    {
        return ::google::protobuf::Message::DefaultConstruct<
            ListDeviceDescriptorsResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const ListDeviceDescriptorsResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const ListDeviceDescriptorsResponse& from)
    {
        ListDeviceDescriptorsResponse::MergeImpl(*this, from);
    }

   private:
    static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                          const ::google::protobuf::MessageLite& from_msg);

   public:
    bool IsInitialized() const { return true; }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
   private:
    static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
    static ::uint8_t* _InternalSerialize(
        const MessageLite& msg, ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream);

   public:
    ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const
    {
        return _InternalSerialize(*this, target, stream);
    }
#else   // PROTOBUF_CUSTOM_VTABLE
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(ListDeviceDescriptorsResponse* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse";
    }

   protected:
    explicit ListDeviceDescriptorsResponse(::google::protobuf::Arena* arena);
    ListDeviceDescriptorsResponse(::google::protobuf::Arena* arena,
                                  const ListDeviceDescriptorsResponse& from);
    ListDeviceDescriptorsResponse(::google::protobuf::Arena* arena,
                                  ListDeviceDescriptorsResponse&& from) noexcept
        : ListDeviceDescriptorsResponse(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const
        PROTOBUF_FINAL;
    static const ::google::protobuf::Message::ClassDataFull _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int
    {
        kDeviceDescriptorsFieldNumber = 1,
    };
    // repeated .novonotes.audio_engine.v1alpha1.DeviceDescriptor
    // device_descriptors = 1;
    int device_descriptors_size() const;

   private:
    int _internal_device_descriptors_size() const;

   public:
    void clear_device_descriptors();
    ::novonotes::audio_engine::v1alpha1::DeviceDescriptor*
    mutable_device_descriptors(int index);
    ::google::protobuf::RepeatedPtrField<
        ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>*
    mutable_device_descriptors();

   private:
    const ::google::protobuf::RepeatedPtrField<
        ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>&
    _internal_device_descriptors() const;
    ::google::protobuf::RepeatedPtrField<
        ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>*
    _internal_mutable_device_descriptors();

   public:
    const ::novonotes::audio_engine::v1alpha1::DeviceDescriptor&
    device_descriptors(int index) const;
    ::novonotes::audio_engine::v1alpha1::DeviceDescriptor*
    add_device_descriptors();
    const ::google::protobuf::RepeatedPtrField<
        ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>&
    device_descriptors() const;
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_ListDeviceDescriptorsResponse_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const ListDeviceDescriptorsResponse& from_msg);
        ::google::protobuf::RepeatedPtrField<
            ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>
            device_descriptors_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceDescriptor

// string device_type_id = 1;
inline void DeviceDescriptor::clear_device_type_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.device_type_id_.ClearToEmpty();
}
inline const std::string& DeviceDescriptor::device_type_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.DeviceDescriptor.device_type_id)
    return _internal_device_type_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceDescriptor::set_device_type_id(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.device_type_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.DeviceDescriptor.device_type_id)
}
inline std::string* DeviceDescriptor::mutable_device_type_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_device_type_id();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.DeviceDescriptor.device_type_id)
    return _s;
}
inline const std::string& DeviceDescriptor::_internal_device_type_id() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.device_type_id_.Get();
}
inline void DeviceDescriptor::_internal_set_device_type_id(
    const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.device_type_id_.Set(value, GetArena());
}
inline std::string* DeviceDescriptor::_internal_mutable_device_type_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.device_type_id_.Mutable(GetArena());
}
inline std::string* DeviceDescriptor::release_device_type_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.DeviceDescriptor.device_type_id)
    return _impl_.device_type_id_.Release();
}
inline void DeviceDescriptor::set_allocated_device_type_id(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.device_type_id_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.device_type_id_.IsDefault())
    {
        _impl_.device_type_id_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.DeviceDescriptor.device_type_id)
}

// string display_name = 2;
inline void DeviceDescriptor::clear_display_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.display_name_.ClearToEmpty();
}
inline const std::string& DeviceDescriptor::display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.DeviceDescriptor.display_name)
    return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceDescriptor::set_display_name(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.DeviceDescriptor.display_name)
}
inline std::string* DeviceDescriptor::mutable_display_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_display_name();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.DeviceDescriptor.display_name)
    return _s;
}
inline const std::string& DeviceDescriptor::_internal_display_name() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.display_name_.Get();
}
inline void DeviceDescriptor::_internal_set_display_name(
    const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.display_name_.Set(value, GetArena());
}
inline std::string* DeviceDescriptor::_internal_mutable_display_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.display_name_.Mutable(GetArena());
}
inline std::string* DeviceDescriptor::release_display_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.DeviceDescriptor.display_name)
    return _impl_.display_name_.Release();
}
inline void DeviceDescriptor::set_allocated_display_name(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.display_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.display_name_.IsDefault())
    {
        _impl_.display_name_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.DeviceDescriptor.display_name)
}

// string plugin_format_name = 3;
inline void DeviceDescriptor::clear_plugin_format_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plugin_format_name_.ClearToEmpty();
}
inline const std::string& DeviceDescriptor::plugin_format_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.DeviceDescriptor.plugin_format_name)
    return _internal_plugin_format_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceDescriptor::set_plugin_format_name(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plugin_format_name_.Set(static_cast<Arg_&&>(arg), args...,
                                   GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.DeviceDescriptor.plugin_format_name)
}
inline std::string* DeviceDescriptor::mutable_plugin_format_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_plugin_format_name();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.DeviceDescriptor.plugin_format_name)
    return _s;
}
inline const std::string& DeviceDescriptor::_internal_plugin_format_name() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.plugin_format_name_.Get();
}
inline void DeviceDescriptor::_internal_set_plugin_format_name(
    const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plugin_format_name_.Set(value, GetArena());
}
inline std::string* DeviceDescriptor::_internal_mutable_plugin_format_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.plugin_format_name_.Mutable(GetArena());
}
inline std::string* DeviceDescriptor::release_plugin_format_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.DeviceDescriptor.plugin_format_name)
    return _impl_.plugin_format_name_.Release();
}
inline void DeviceDescriptor::set_allocated_plugin_format_name(
    std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plugin_format_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.plugin_format_name_.IsDefault())
    {
        _impl_.plugin_format_name_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.DeviceDescriptor.plugin_format_name)
}

// string manufacturer_name = 5;
inline void DeviceDescriptor::clear_manufacturer_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.manufacturer_name_.ClearToEmpty();
}
inline const std::string& DeviceDescriptor::manufacturer_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.DeviceDescriptor.manufacturer_name)
    return _internal_manufacturer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceDescriptor::set_manufacturer_name(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.manufacturer_name_.Set(static_cast<Arg_&&>(arg), args...,
                                  GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.DeviceDescriptor.manufacturer_name)
}
inline std::string* DeviceDescriptor::mutable_manufacturer_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_manufacturer_name();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.DeviceDescriptor.manufacturer_name)
    return _s;
}
inline const std::string& DeviceDescriptor::_internal_manufacturer_name() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.manufacturer_name_.Get();
}
inline void DeviceDescriptor::_internal_set_manufacturer_name(
    const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.manufacturer_name_.Set(value, GetArena());
}
inline std::string* DeviceDescriptor::_internal_mutable_manufacturer_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.manufacturer_name_.Mutable(GetArena());
}
inline std::string* DeviceDescriptor::release_manufacturer_name()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.DeviceDescriptor.manufacturer_name)
    return _impl_.manufacturer_name_.Release();
}
inline void DeviceDescriptor::set_allocated_manufacturer_name(
    std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.manufacturer_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.manufacturer_name_.IsDefault())
    {
        _impl_.manufacturer_name_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.DeviceDescriptor.manufacturer_name)
}

// string version = 6;
inline void DeviceDescriptor::clear_version()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.version_.ClearToEmpty();
}
inline const std::string& DeviceDescriptor::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.DeviceDescriptor.version)
    return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceDescriptor::set_version(Arg_&& arg,
                                                                 Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.DeviceDescriptor.version)
}
inline std::string* DeviceDescriptor::mutable_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_version();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.DeviceDescriptor.version)
    return _s;
}
inline const std::string& DeviceDescriptor::_internal_version() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.version_.Get();
}
inline void DeviceDescriptor::_internal_set_version(const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.version_.Set(value, GetArena());
}
inline std::string* DeviceDescriptor::_internal_mutable_version()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.version_.Mutable(GetArena());
}
inline std::string* DeviceDescriptor::release_version()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.DeviceDescriptor.version)
    return _impl_.version_.Release();
}
inline void DeviceDescriptor::set_allocated_version(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.version_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.version_.IsDefault())
    {
        _impl_.version_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.DeviceDescriptor.version)
}

// -------------------------------------------------------------------

// ListDeviceDescriptorsRequest

// -------------------------------------------------------------------

// ListDeviceDescriptorsResponse

// repeated .novonotes.audio_engine.v1alpha1.DeviceDescriptor device_descriptors
// = 1;
inline int ListDeviceDescriptorsResponse::_internal_device_descriptors_size()
    const
{
    return _internal_device_descriptors().size();
}
inline int ListDeviceDescriptorsResponse::device_descriptors_size() const
{
    return _internal_device_descriptors_size();
}
inline void ListDeviceDescriptorsResponse::clear_device_descriptors()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.device_descriptors_.Clear();
}
inline ::novonotes::audio_engine::v1alpha1::DeviceDescriptor*
ListDeviceDescriptorsResponse::mutable_device_descriptors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse.device_descriptors)
    return _internal_mutable_device_descriptors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<
    ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>*
ListDeviceDescriptorsResponse::mutable_device_descriptors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable_list:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse.device_descriptors)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _internal_mutable_device_descriptors();
}
inline const ::novonotes::audio_engine::v1alpha1::DeviceDescriptor&
ListDeviceDescriptorsResponse::device_descriptors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse.device_descriptors)
    return _internal_device_descriptors().Get(index);
}
inline ::novonotes::audio_engine::v1alpha1::DeviceDescriptor*
ListDeviceDescriptorsResponse::add_device_descriptors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::novonotes::audio_engine::v1alpha1::DeviceDescriptor* _add =
        _internal_mutable_device_descriptors()->Add();
    // @@protoc_insertion_point(field_add:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse.device_descriptors)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>&
ListDeviceDescriptorsResponse::device_descriptors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_list:novonotes.audio_engine.v1alpha1.ListDeviceDescriptorsResponse.device_descriptors)
    return _internal_device_descriptors();
}
inline const ::google::protobuf::RepeatedPtrField<
    ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>&
ListDeviceDescriptorsResponse::_internal_device_descriptors() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.device_descriptors_;
}
inline ::google::protobuf::RepeatedPtrField<
    ::novonotes::audio_engine::v1alpha1::DeviceDescriptor>*
ListDeviceDescriptorsResponse::_internal_mutable_device_descriptors()
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return &_impl_.device_descriptors_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace audio_engine
}  // namespace novonotes

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2fdevice_5fdescriptor_2eproto_2epb_2eh
