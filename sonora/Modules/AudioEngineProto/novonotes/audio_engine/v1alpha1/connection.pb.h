// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: novonotes/audio_engine/v1alpha1/connection.proto
// Protobuf C++ Version: 5.28.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/api/field_behavior.pb.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto

namespace google
{
namespace protobuf
{
namespace internal
{
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto
{
    static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto;
namespace novonotes
{
namespace audio_engine
{
namespace v1alpha1
{
class ConnectRequest;
struct ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectResponse;
struct ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class Connection;
struct ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class DisconnectRequest;
struct DisconnectRequestDefaultTypeInternal;
extern DisconnectRequestDefaultTypeInternal
    _DisconnectRequest_default_instance_;
class DisconnectResponse;
struct DisconnectResponseDefaultTypeInternal;
extern DisconnectResponseDefaultTypeInternal
    _DisconnectResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace audio_engine
}  // namespace novonotes
namespace google
{
namespace protobuf
{}  // namespace protobuf
}  // namespace google

namespace novonotes
{
namespace audio_engine
{
namespace v1alpha1
{

// ===================================================================

// -------------------------------------------------------------------

class DisconnectResponse final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.DisconnectResponse)
 */
{
   public:
    inline DisconnectResponse() : DisconnectResponse(nullptr) {}
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR DisconnectResponse(
        ::google::protobuf::internal::ConstantInitialized);

    inline DisconnectResponse(const DisconnectResponse& from)
        : DisconnectResponse(nullptr, from)
    {}
    inline DisconnectResponse(DisconnectResponse&& from) noexcept
        : DisconnectResponse(nullptr, std::move(from))
    {}
    inline DisconnectResponse& operator=(const DisconnectResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline DisconnectResponse& operator=(DisconnectResponse&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const DisconnectResponse& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const DisconnectResponse* internal_default_instance()
    {
        return reinterpret_cast<const DisconnectResponse*>(
            &_DisconnectResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;
    friend void swap(DisconnectResponse& a, DisconnectResponse& b)
    {
        a.Swap(&b);
    }
    inline void Swap(DisconnectResponse* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DisconnectResponse* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    DisconnectResponse* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<
            DisconnectResponse>(arena);
    }
    using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
    inline void CopyFrom(const DisconnectResponse& from)
    {
        ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
    }
    using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
    void MergeFrom(const DisconnectResponse& from)
    {
        ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
    }

   public:
    bool IsInitialized() const { return true; }

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.DisconnectResponse";
    }

   protected:
    explicit DisconnectResponse(::google::protobuf::Arena* arena);
    DisconnectResponse(::google::protobuf::Arena* arena,
                       const DisconnectResponse& from);
    DisconnectResponse(::google::protobuf::Arena* arena,
                       DisconnectResponse&& from) noexcept
        : DisconnectResponse(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::internal::ZeroFieldsBase::ClassData*
    GetClassData() const PROTOBUF_FINAL;
    static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull
        _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.DisconnectResponse)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 0, 0, 0, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_DisconnectResponse_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const DisconnectResponse& from_msg);
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.ConnectResponse)
 */
{
   public:
    inline ConnectResponse() : ConnectResponse(nullptr) {}
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR ConnectResponse(
        ::google::protobuf::internal::ConstantInitialized);

    inline ConnectResponse(const ConnectResponse& from)
        : ConnectResponse(nullptr, from)
    {}
    inline ConnectResponse(ConnectResponse&& from) noexcept
        : ConnectResponse(nullptr, std::move(from))
    {}
    inline ConnectResponse& operator=(const ConnectResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ConnectResponse& operator=(ConnectResponse&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const ConnectResponse& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const ConnectResponse* internal_default_instance()
    {
        return reinterpret_cast<const ConnectResponse*>(
            &_ConnectResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;
    friend void swap(ConnectResponse& a, ConnectResponse& b) { a.Swap(&b); }
    inline void Swap(ConnectResponse* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ConnectResponse* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ConnectResponse* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<
            ConnectResponse>(arena);
    }
    using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
    inline void CopyFrom(const ConnectResponse& from)
    {
        ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
    }
    using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
    void MergeFrom(const ConnectResponse& from)
    {
        ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
    }

   public:
    bool IsInitialized() const { return true; }

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.ConnectResponse";
    }

   protected:
    explicit ConnectResponse(::google::protobuf::Arena* arena);
    ConnectResponse(::google::protobuf::Arena* arena,
                    const ConnectResponse& from);
    ConnectResponse(::google::protobuf::Arena* arena,
                    ConnectResponse&& from) noexcept
        : ConnectResponse(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::internal::ZeroFieldsBase::ClassData*
    GetClassData() const PROTOBUF_FINAL;
    static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull
        _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.ConnectResponse)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 0, 0, 0, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_ConnectResponse_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const ConnectResponse& from_msg);
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class Connection final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.Connection)
 */
{
   public:
    inline Connection() : Connection(nullptr) {}
    ~Connection() PROTOBUF_FINAL;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR Connection(
        ::google::protobuf::internal::ConstantInitialized);

    inline Connection(const Connection& from) : Connection(nullptr, from) {}
    inline Connection(Connection&& from) noexcept
        : Connection(nullptr, std::move(from))
    {}
    inline Connection& operator=(const Connection& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Connection& operator=(Connection&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const Connection& default_instance()
    {
        return *internal_default_instance();
    }
    enum SourceCase
    {
        kSrcAudioTrackId = 101,
        kSrcDeviceId = 103,
        SOURCE_NOT_SET = 0,
    };
    enum DestinationCase
    {
        kDestAudioOutput = 201,
        kDestDeviceId = 202,
        DESTINATION_NOT_SET = 0,
    };
    static inline const Connection* internal_default_instance()
    {
        return reinterpret_cast<const Connection*>(
            &_Connection_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;
    friend void swap(Connection& a, Connection& b) { a.Swap(&b); }
    inline void Swap(Connection* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Connection* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    Connection* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::Message::DefaultConstruct<Connection>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const Connection& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const Connection& from)
    {
        Connection::MergeImpl(*this, from);
    }

   private:
    static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                          const ::google::protobuf::MessageLite& from_msg);

   public:
    bool IsInitialized() const { return true; }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
   private:
    static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
    static ::uint8_t* _InternalSerialize(
        const MessageLite& msg, ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream);

   public:
    ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const
    {
        return _InternalSerialize(*this, target, stream);
    }
#else   // PROTOBUF_CUSTOM_VTABLE
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(Connection* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.Connection";
    }

   protected:
    explicit Connection(::google::protobuf::Arena* arena);
    Connection(::google::protobuf::Arena* arena, const Connection& from);
    Connection(::google::protobuf::Arena* arena, Connection&& from) noexcept
        : Connection(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const
        PROTOBUF_FINAL;
    static const ::google::protobuf::Message::ClassDataFull _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int
    {
        kSrcAudioTrackIdFieldNumber = 101,
        kSrcDeviceIdFieldNumber = 103,
        kDestAudioOutputFieldNumber = 201,
        kDestDeviceIdFieldNumber = 202,
    };
    // string src_audio_track_id = 101;
    bool has_src_audio_track_id() const;
    void clear_src_audio_track_id();
    const std::string& src_audio_track_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_src_audio_track_id(Arg_&& arg, Args_... args);
    std::string* mutable_src_audio_track_id();
    PROTOBUF_NODISCARD std::string* release_src_audio_track_id();
    void set_allocated_src_audio_track_id(std::string* value);

   private:
    const std::string& _internal_src_audio_track_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_audio_track_id(
        const std::string& value);
    std::string* _internal_mutable_src_audio_track_id();

   public:
    // string src_device_id = 103;
    bool has_src_device_id() const;
    void clear_src_device_id();
    const std::string& src_device_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_src_device_id(Arg_&& arg, Args_... args);
    std::string* mutable_src_device_id();
    PROTOBUF_NODISCARD std::string* release_src_device_id();
    void set_allocated_src_device_id(std::string* value);

   private:
    const std::string& _internal_src_device_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_device_id(
        const std::string& value);
    std::string* _internal_mutable_src_device_id();

   public:
    // .google.protobuf.Empty dest_audio_output = 201;
    bool has_dest_audio_output() const;

   private:
    bool _internal_has_dest_audio_output() const;

   public:
    void clear_dest_audio_output();
    const ::google::protobuf::Empty& dest_audio_output() const;
    PROTOBUF_NODISCARD ::google::protobuf::Empty* release_dest_audio_output();
    ::google::protobuf::Empty* mutable_dest_audio_output();
    void set_allocated_dest_audio_output(::google::protobuf::Empty* value);
    void unsafe_arena_set_allocated_dest_audio_output(
        ::google::protobuf::Empty* value);
    ::google::protobuf::Empty* unsafe_arena_release_dest_audio_output();

   private:
    const ::google::protobuf::Empty& _internal_dest_audio_output() const;
    ::google::protobuf::Empty* _internal_mutable_dest_audio_output();

   public:
    // string dest_device_id = 202;
    bool has_dest_device_id() const;
    void clear_dest_device_id();
    const std::string& dest_device_id() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_dest_device_id(Arg_&& arg, Args_... args);
    std::string* mutable_dest_device_id();
    PROTOBUF_NODISCARD std::string* release_dest_device_id();
    void set_allocated_dest_device_id(std::string* value);

   private:
    const std::string& _internal_dest_device_id() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest_device_id(
        const std::string& value);
    std::string* _internal_mutable_dest_device_id();

   public:
    void clear_source();
    SourceCase source_case() const;
    void clear_destination();
    DestinationCase destination_case() const;
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.Connection)
   private:
    class _Internal;
    void set_has_src_audio_track_id();
    void set_has_src_device_id();
    void set_has_dest_audio_output();
    void set_has_dest_device_id();
    inline bool has_source() const;
    inline void clear_has_source();
    inline bool has_destination() const;
    inline void clear_has_destination();
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 4, 1, 96, 12>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_Connection_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const Connection& from_msg);
        union SourceUnion
        {
            constexpr SourceUnion() : _constinit_{} {}
            ::google::protobuf::internal::ConstantInitialized _constinit_;
            ::google::protobuf::internal::ArenaStringPtr src_audio_track_id_;
            ::google::protobuf::internal::ArenaStringPtr src_device_id_;
        } source_;
        union DestinationUnion
        {
            constexpr DestinationUnion() : _constinit_{} {}
            ::google::protobuf::internal::ConstantInitialized _constinit_;
            ::google::protobuf::Empty* dest_audio_output_;
            ::google::protobuf::internal::ArenaStringPtr dest_device_id_;
        } destination_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::uint32_t _oneof_case_[2];
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class DisconnectRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.DisconnectRequest)
 */
{
   public:
    inline DisconnectRequest() : DisconnectRequest(nullptr) {}
    ~DisconnectRequest() PROTOBUF_FINAL;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR DisconnectRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline DisconnectRequest(const DisconnectRequest& from)
        : DisconnectRequest(nullptr, from)
    {}
    inline DisconnectRequest(DisconnectRequest&& from) noexcept
        : DisconnectRequest(nullptr, std::move(from))
    {}
    inline DisconnectRequest& operator=(const DisconnectRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline DisconnectRequest& operator=(DisconnectRequest&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const DisconnectRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const DisconnectRequest* internal_default_instance()
    {
        return reinterpret_cast<const DisconnectRequest*>(
            &_DisconnectRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;
    friend void swap(DisconnectRequest& a, DisconnectRequest& b) { a.Swap(&b); }
    inline void Swap(DisconnectRequest* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DisconnectRequest* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    DisconnectRequest* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::Message::DefaultConstruct<DisconnectRequest>(
            arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const DisconnectRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const DisconnectRequest& from)
    {
        DisconnectRequest::MergeImpl(*this, from);
    }

   private:
    static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                          const ::google::protobuf::MessageLite& from_msg);

   public:
    bool IsInitialized() const { return true; }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
   private:
    static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
    static ::uint8_t* _InternalSerialize(
        const MessageLite& msg, ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream);

   public:
    ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const
    {
        return _InternalSerialize(*this, target, stream);
    }
#else   // PROTOBUF_CUSTOM_VTABLE
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(DisconnectRequest* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.DisconnectRequest";
    }

   protected:
    explicit DisconnectRequest(::google::protobuf::Arena* arena);
    DisconnectRequest(::google::protobuf::Arena* arena,
                      const DisconnectRequest& from);
    DisconnectRequest(::google::protobuf::Arena* arena,
                      DisconnectRequest&& from) noexcept
        : DisconnectRequest(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const
        PROTOBUF_FINAL;
    static const ::google::protobuf::Message::ClassDataFull _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int
    {
        kConnectionFieldNumber = 2,
    };
    // .novonotes.audio_engine.v1alpha1.Connection connection = 2
    // [(.google.api.field_behavior) = REQUIRED];
    bool has_connection() const;
    void clear_connection();
    const ::novonotes::audio_engine::v1alpha1::Connection& connection() const;
    PROTOBUF_NODISCARD ::novonotes::audio_engine::v1alpha1::Connection*
    release_connection();
    ::novonotes::audio_engine::v1alpha1::Connection* mutable_connection();
    void set_allocated_connection(
        ::novonotes::audio_engine::v1alpha1::Connection* value);
    void unsafe_arena_set_allocated_connection(
        ::novonotes::audio_engine::v1alpha1::Connection* value);
    ::novonotes::audio_engine::v1alpha1::Connection*
    unsafe_arena_release_connection();

   private:
    const ::novonotes::audio_engine::v1alpha1::Connection&
    _internal_connection() const;
    ::novonotes::audio_engine::v1alpha1::Connection*
    _internal_mutable_connection();

   public:
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.DisconnectRequest)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_DisconnectRequest_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const DisconnectRequest& from_msg);
        ::google::protobuf::internal::HasBits<1> _has_bits_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::novonotes::audio_engine::v1alpha1::Connection* connection_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:novonotes.audio_engine.v1alpha1.ConnectRequest)
 */
{
   public:
    inline ConnectRequest() : ConnectRequest(nullptr) {}
    ~ConnectRequest() PROTOBUF_FINAL;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR ConnectRequest(
        ::google::protobuf::internal::ConstantInitialized);

    inline ConnectRequest(const ConnectRequest& from)
        : ConnectRequest(nullptr, from)
    {}
    inline ConnectRequest(ConnectRequest&& from) noexcept
        : ConnectRequest(nullptr, std::move(from))
    {}
    inline ConnectRequest& operator=(const ConnectRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ConnectRequest& operator=(ConnectRequest&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const ConnectRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const ConnectRequest* internal_default_instance()
    {
        return reinterpret_cast<const ConnectRequest*>(
            &_ConnectRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;
    friend void swap(ConnectRequest& a, ConnectRequest& b) { a.Swap(&b); }
    inline void Swap(ConnectRequest* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ConnectRequest* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ConnectRequest* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::Message::DefaultConstruct<ConnectRequest>(
            arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const ConnectRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const ConnectRequest& from)
    {
        ConnectRequest::MergeImpl(*this, from);
    }

   private:
    static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                          const ::google::protobuf::MessageLite& from_msg);

   public:
    bool IsInitialized() const { return true; }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
   private:
    static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
    static ::uint8_t* _InternalSerialize(
        const MessageLite& msg, ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream);

   public:
    ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const
    {
        return _InternalSerialize(*this, target, stream);
    }
#else   // PROTOBUF_CUSTOM_VTABLE
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(ConnectRequest* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "novonotes.audio_engine.v1alpha1.ConnectRequest";
    }

   protected:
    explicit ConnectRequest(::google::protobuf::Arena* arena);
    ConnectRequest(::google::protobuf::Arena* arena,
                   const ConnectRequest& from);
    ConnectRequest(::google::protobuf::Arena* arena,
                   ConnectRequest&& from) noexcept
        : ConnectRequest(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const
        PROTOBUF_FINAL;
    static const ::google::protobuf::Message::ClassDataFull _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int
    {
        kConnectionFieldNumber = 2,
    };
    // .novonotes.audio_engine.v1alpha1.Connection connection = 2
    // [(.google.api.field_behavior) = REQUIRED];
    bool has_connection() const;
    void clear_connection();
    const ::novonotes::audio_engine::v1alpha1::Connection& connection() const;
    PROTOBUF_NODISCARD ::novonotes::audio_engine::v1alpha1::Connection*
    release_connection();
    ::novonotes::audio_engine::v1alpha1::Connection* mutable_connection();
    void set_allocated_connection(
        ::novonotes::audio_engine::v1alpha1::Connection* value);
    void unsafe_arena_set_allocated_connection(
        ::novonotes::audio_engine::v1alpha1::Connection* value);
    ::novonotes::audio_engine::v1alpha1::Connection*
    unsafe_arena_release_connection();

   private:
    const ::novonotes::audio_engine::v1alpha1::Connection&
    _internal_connection() const;
    ::novonotes::audio_engine::v1alpha1::Connection*
    _internal_mutable_connection();

   public:
    // @@protoc_insertion_point(class_scope:novonotes.audio_engine.v1alpha1.ConnectRequest)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_ConnectRequest_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const ConnectRequest& from_msg);
        ::google::protobuf::internal::HasBits<1> _has_bits_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        ::novonotes::audio_engine::v1alpha1::Connection* connection_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::
        TableStruct_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Connection

// string src_audio_track_id = 101;
inline bool Connection::has_src_audio_track_id() const
{
    return source_case() == kSrcAudioTrackId;
}
inline void Connection::set_has_src_audio_track_id()
{
    _impl_._oneof_case_[0] = kSrcAudioTrackId;
}
inline void Connection::clear_src_audio_track_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() == kSrcAudioTrackId)
    {
        _impl_.source_.src_audio_track_id_.Destroy();
        clear_has_source();
    }
}
inline const std::string& Connection::src_audio_track_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.Connection.src_audio_track_id)
    return _internal_src_audio_track_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connection::set_src_audio_track_id(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() != kSrcAudioTrackId)
    {
        clear_source();

        set_has_src_audio_track_id();
        _impl_.source_.src_audio_track_id_.InitDefault();
    }
    _impl_.source_.src_audio_track_id_.Set(static_cast<Arg_&&>(arg), args...,
                                           GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.Connection.src_audio_track_id)
}
inline std::string* Connection::mutable_src_audio_track_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_src_audio_track_id();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.Connection.src_audio_track_id)
    return _s;
}
inline const std::string& Connection::_internal_src_audio_track_id() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    if(source_case() != kSrcAudioTrackId)
    {
        return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
    }
    return _impl_.source_.src_audio_track_id_.Get();
}
inline void Connection::_internal_set_src_audio_track_id(
    const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() != kSrcAudioTrackId)
    {
        clear_source();

        set_has_src_audio_track_id();
        _impl_.source_.src_audio_track_id_.InitDefault();
    }
    _impl_.source_.src_audio_track_id_.Set(value, GetArena());
}
inline std::string* Connection::_internal_mutable_src_audio_track_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() != kSrcAudioTrackId)
    {
        clear_source();

        set_has_src_audio_track_id();
        _impl_.source_.src_audio_track_id_.InitDefault();
    }
    return _impl_.source_.src_audio_track_id_.Mutable(GetArena());
}
inline std::string* Connection::release_src_audio_track_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.Connection.src_audio_track_id)
    if(source_case() != kSrcAudioTrackId)
    {
        return nullptr;
    }
    clear_has_source();
    return _impl_.source_.src_audio_track_id_.Release();
}
inline void Connection::set_allocated_src_audio_track_id(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(has_source())
    {
        clear_source();
    }
    if(value != nullptr)
    {
        set_has_src_audio_track_id();
        _impl_.source_.src_audio_track_id_.InitAllocated(value, GetArena());
    }
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.Connection.src_audio_track_id)
}

// string src_device_id = 103;
inline bool Connection::has_src_device_id() const
{
    return source_case() == kSrcDeviceId;
}
inline void Connection::set_has_src_device_id()
{
    _impl_._oneof_case_[0] = kSrcDeviceId;
}
inline void Connection::clear_src_device_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() == kSrcDeviceId)
    {
        _impl_.source_.src_device_id_.Destroy();
        clear_has_source();
    }
}
inline const std::string& Connection::src_device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.Connection.src_device_id)
    return _internal_src_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connection::set_src_device_id(Arg_&& arg,
                                                                 Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() != kSrcDeviceId)
    {
        clear_source();

        set_has_src_device_id();
        _impl_.source_.src_device_id_.InitDefault();
    }
    _impl_.source_.src_device_id_.Set(static_cast<Arg_&&>(arg), args...,
                                      GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.Connection.src_device_id)
}
inline std::string* Connection::mutable_src_device_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_src_device_id();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.Connection.src_device_id)
    return _s;
}
inline const std::string& Connection::_internal_src_device_id() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    if(source_case() != kSrcDeviceId)
    {
        return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
    }
    return _impl_.source_.src_device_id_.Get();
}
inline void Connection::_internal_set_src_device_id(const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() != kSrcDeviceId)
    {
        clear_source();

        set_has_src_device_id();
        _impl_.source_.src_device_id_.InitDefault();
    }
    _impl_.source_.src_device_id_.Set(value, GetArena());
}
inline std::string* Connection::_internal_mutable_src_device_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(source_case() != kSrcDeviceId)
    {
        clear_source();

        set_has_src_device_id();
        _impl_.source_.src_device_id_.InitDefault();
    }
    return _impl_.source_.src_device_id_.Mutable(GetArena());
}
inline std::string* Connection::release_src_device_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.Connection.src_device_id)
    if(source_case() != kSrcDeviceId)
    {
        return nullptr;
    }
    clear_has_source();
    return _impl_.source_.src_device_id_.Release();
}
inline void Connection::set_allocated_src_device_id(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(has_source())
    {
        clear_source();
    }
    if(value != nullptr)
    {
        set_has_src_device_id();
        _impl_.source_.src_device_id_.InitAllocated(value, GetArena());
    }
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.Connection.src_device_id)
}

// .google.protobuf.Empty dest_audio_output = 201;
inline bool Connection::has_dest_audio_output() const
{
    return destination_case() == kDestAudioOutput;
}
inline bool Connection::_internal_has_dest_audio_output() const
{
    return destination_case() == kDestAudioOutput;
}
inline void Connection::set_has_dest_audio_output()
{
    _impl_._oneof_case_[1] = kDestAudioOutput;
}
inline ::google::protobuf::Empty* Connection::release_dest_audio_output()
{
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.Connection.dest_audio_output)
    if(destination_case() == kDestAudioOutput)
    {
        clear_has_destination();
        auto* temp = _impl_.destination_.dest_audio_output_;
        if(GetArena() != nullptr)
        {
            temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
        }
        _impl_.destination_.dest_audio_output_ = nullptr;
        return temp;
    }
    else
    {
        return nullptr;
    }
}
inline const ::google::protobuf::Empty&
Connection::_internal_dest_audio_output() const
{
    return destination_case() == kDestAudioOutput
               ? *_impl_.destination_.dest_audio_output_
               : reinterpret_cast<::google::protobuf::Empty&>(
                     ::google::protobuf::_Empty_default_instance_);
}
inline const ::google::protobuf::Empty& Connection::dest_audio_output() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.Connection.dest_audio_output)
    return _internal_dest_audio_output();
}
inline ::google::protobuf::Empty*
Connection::unsafe_arena_release_dest_audio_output()
{
    // @@protoc_insertion_point(field_unsafe_arena_release:novonotes.audio_engine.v1alpha1.Connection.dest_audio_output)
    if(destination_case() == kDestAudioOutput)
    {
        clear_has_destination();
        auto* temp = _impl_.destination_.dest_audio_output_;
        _impl_.destination_.dest_audio_output_ = nullptr;
        return temp;
    }
    else
    {
        return nullptr;
    }
}
inline void Connection::unsafe_arena_set_allocated_dest_audio_output(
    ::google::protobuf::Empty* value)
{
    // We rely on the oneof clear method to free the earlier contents
    // of this oneof. We can directly use the pointer we're given to
    // set the new value.
    clear_destination();
    if(value)
    {
        set_has_dest_audio_output();
        _impl_.destination_.dest_audio_output_ = value;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novonotes.audio_engine.v1alpha1.Connection.dest_audio_output)
}
inline ::google::protobuf::Empty*
Connection::_internal_mutable_dest_audio_output()
{
    if(destination_case() != kDestAudioOutput)
    {
        clear_destination();
        set_has_dest_audio_output();
        _impl_.destination_.dest_audio_output_ =
            ::google::protobuf::Message::DefaultConstruct<
                ::google::protobuf::Empty>(GetArena());
    }
    return _impl_.destination_.dest_audio_output_;
}
inline ::google::protobuf::Empty* Connection::mutable_dest_audio_output()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    ::google::protobuf::Empty* _msg = _internal_mutable_dest_audio_output();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.Connection.dest_audio_output)
    return _msg;
}

// string dest_device_id = 202;
inline bool Connection::has_dest_device_id() const
{
    return destination_case() == kDestDeviceId;
}
inline void Connection::set_has_dest_device_id()
{
    _impl_._oneof_case_[1] = kDestDeviceId;
}
inline void Connection::clear_dest_device_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(destination_case() == kDestDeviceId)
    {
        _impl_.destination_.dest_device_id_.Destroy();
        clear_has_destination();
    }
}
inline const std::string& Connection::dest_device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.Connection.dest_device_id)
    return _internal_dest_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connection::set_dest_device_id(Arg_&& arg,
                                                                  Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(destination_case() != kDestDeviceId)
    {
        clear_destination();

        set_has_dest_device_id();
        _impl_.destination_.dest_device_id_.InitDefault();
    }
    _impl_.destination_.dest_device_id_.Set(static_cast<Arg_&&>(arg), args...,
                                            GetArena());
    // @@protoc_insertion_point(field_set:novonotes.audio_engine.v1alpha1.Connection.dest_device_id)
}
inline std::string* Connection::mutable_dest_device_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_dest_device_id();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.Connection.dest_device_id)
    return _s;
}
inline const std::string& Connection::_internal_dest_device_id() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    if(destination_case() != kDestDeviceId)
    {
        return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
    }
    return _impl_.destination_.dest_device_id_.Get();
}
inline void Connection::_internal_set_dest_device_id(const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(destination_case() != kDestDeviceId)
    {
        clear_destination();

        set_has_dest_device_id();
        _impl_.destination_.dest_device_id_.InitDefault();
    }
    _impl_.destination_.dest_device_id_.Set(value, GetArena());
}
inline std::string* Connection::_internal_mutable_dest_device_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(destination_case() != kDestDeviceId)
    {
        clear_destination();

        set_has_dest_device_id();
        _impl_.destination_.dest_device_id_.InitDefault();
    }
    return _impl_.destination_.dest_device_id_.Mutable(GetArena());
}
inline std::string* Connection::release_dest_device_id()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.Connection.dest_device_id)
    if(destination_case() != kDestDeviceId)
    {
        return nullptr;
    }
    clear_has_destination();
    return _impl_.destination_.dest_device_id_.Release();
}
inline void Connection::set_allocated_dest_device_id(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(has_destination())
    {
        clear_destination();
    }
    if(value != nullptr)
    {
        set_has_dest_device_id();
        _impl_.destination_.dest_device_id_.InitAllocated(value, GetArena());
    }
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.Connection.dest_device_id)
}

inline bool Connection::has_source() const
{
    return source_case() != SOURCE_NOT_SET;
}
inline void Connection::clear_has_source()
{
    _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline bool Connection::has_destination() const
{
    return destination_case() != DESTINATION_NOT_SET;
}
inline void Connection::clear_has_destination()
{
    _impl_._oneof_case_[1] = DESTINATION_NOT_SET;
}
inline Connection::SourceCase Connection::source_case() const
{
    return Connection::SourceCase(_impl_._oneof_case_[0]);
}
inline Connection::DestinationCase Connection::destination_case() const
{
    return Connection::DestinationCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// ConnectRequest

// .novonotes.audio_engine.v1alpha1.Connection connection = 2
// [(.google.api.field_behavior) = REQUIRED];
inline bool ConnectRequest::has_connection() const
{
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
    return value;
}
inline void ConnectRequest::clear_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(_impl_.connection_ != nullptr) _impl_.connection_->Clear();
    _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::novonotes::audio_engine::v1alpha1::Connection&
ConnectRequest::_internal_connection() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    const ::novonotes::audio_engine::v1alpha1::Connection* p =
        _impl_.connection_;
    return p != nullptr
               ? *p
               : reinterpret_cast<
                     const ::novonotes::audio_engine::v1alpha1::Connection&>(
                     ::novonotes::audio_engine::v1alpha1::
                         _Connection_default_instance_);
}
inline const ::novonotes::audio_engine::v1alpha1::Connection&
ConnectRequest::connection() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.ConnectRequest.connection)
    return _internal_connection();
}
inline void ConnectRequest::unsafe_arena_set_allocated_connection(
    ::novonotes::audio_engine::v1alpha1::Connection* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(GetArena() == nullptr)
    {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(
            _impl_.connection_);
    }
    _impl_.connection_ =
        reinterpret_cast<::novonotes::audio_engine::v1alpha1::Connection*>(
            value);
    if(value != nullptr)
    {
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else
    {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novonotes.audio_engine.v1alpha1.ConnectRequest.connection)
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
ConnectRequest::release_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::novonotes::audio_engine::v1alpha1::Connection* released =
        _impl_.connection_;
    _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if(GetArena() == nullptr)
    {
        delete old;
    }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if(GetArena() != nullptr)
    {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
ConnectRequest::unsafe_arena_release_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.ConnectRequest.connection)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::novonotes::audio_engine::v1alpha1::Connection* temp = _impl_.connection_;
    _impl_.connection_ = nullptr;
    return temp;
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
ConnectRequest::_internal_mutable_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(_impl_.connection_ == nullptr)
    {
        auto* p = ::google::protobuf::Message::DefaultConstruct<
            ::novonotes::audio_engine::v1alpha1::Connection>(GetArena());
        _impl_.connection_ =
            reinterpret_cast<::novonotes::audio_engine::v1alpha1::Connection*>(
                p);
    }
    return _impl_.connection_;
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
ConnectRequest::mutable_connection() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    _impl_._has_bits_[0] |= 0x00000001u;
    ::novonotes::audio_engine::v1alpha1::Connection* _msg =
        _internal_mutable_connection();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.ConnectRequest.connection)
    return _msg;
}
inline void ConnectRequest::set_allocated_connection(
    ::novonotes::audio_engine::v1alpha1::Connection* value)
{
    ::google::protobuf::Arena* message_arena = GetArena();
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(message_arena == nullptr)
    {
        delete(_impl_.connection_);
    }

    if(value != nullptr)
    {
        ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
        if(message_arena != submessage_arena)
        {
            value = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else
    {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.connection_ =
        reinterpret_cast<::novonotes::audio_engine::v1alpha1::Connection*>(
            value);
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.ConnectRequest.connection)
}

// -------------------------------------------------------------------

// ConnectResponse

// -------------------------------------------------------------------

// DisconnectRequest

// .novonotes.audio_engine.v1alpha1.Connection connection = 2
// [(.google.api.field_behavior) = REQUIRED];
inline bool DisconnectRequest::has_connection() const
{
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    PROTOBUF_ASSUME(!value || _impl_.connection_ != nullptr);
    return value;
}
inline void DisconnectRequest::clear_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(_impl_.connection_ != nullptr) _impl_.connection_->Clear();
    _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::novonotes::audio_engine::v1alpha1::Connection&
DisconnectRequest::_internal_connection() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    const ::novonotes::audio_engine::v1alpha1::Connection* p =
        _impl_.connection_;
    return p != nullptr
               ? *p
               : reinterpret_cast<
                     const ::novonotes::audio_engine::v1alpha1::Connection&>(
                     ::novonotes::audio_engine::v1alpha1::
                         _Connection_default_instance_);
}
inline const ::novonotes::audio_engine::v1alpha1::Connection&
DisconnectRequest::connection() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:novonotes.audio_engine.v1alpha1.DisconnectRequest.connection)
    return _internal_connection();
}
inline void DisconnectRequest::unsafe_arena_set_allocated_connection(
    ::novonotes::audio_engine::v1alpha1::Connection* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(GetArena() == nullptr)
    {
        delete reinterpret_cast<::google::protobuf::MessageLite*>(
            _impl_.connection_);
    }
    _impl_.connection_ =
        reinterpret_cast<::novonotes::audio_engine::v1alpha1::Connection*>(
            value);
    if(value != nullptr)
    {
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else
    {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:novonotes.audio_engine.v1alpha1.DisconnectRequest.connection)
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
DisconnectRequest::release_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::novonotes::audio_engine::v1alpha1::Connection* released =
        _impl_.connection_;
    _impl_.connection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if(GetArena() == nullptr)
    {
        delete old;
    }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
    if(GetArena() != nullptr)
    {
        released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return released;
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
DisconnectRequest::unsafe_arena_release_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:novonotes.audio_engine.v1alpha1.DisconnectRequest.connection)

    _impl_._has_bits_[0] &= ~0x00000001u;
    ::novonotes::audio_engine::v1alpha1::Connection* temp = _impl_.connection_;
    _impl_.connection_ = nullptr;
    return temp;
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
DisconnectRequest::_internal_mutable_connection()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(_impl_.connection_ == nullptr)
    {
        auto* p = ::google::protobuf::Message::DefaultConstruct<
            ::novonotes::audio_engine::v1alpha1::Connection>(GetArena());
        _impl_.connection_ =
            reinterpret_cast<::novonotes::audio_engine::v1alpha1::Connection*>(
                p);
    }
    return _impl_.connection_;
}
inline ::novonotes::audio_engine::v1alpha1::Connection*
DisconnectRequest::mutable_connection() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    _impl_._has_bits_[0] |= 0x00000001u;
    ::novonotes::audio_engine::v1alpha1::Connection* _msg =
        _internal_mutable_connection();
    // @@protoc_insertion_point(field_mutable:novonotes.audio_engine.v1alpha1.DisconnectRequest.connection)
    return _msg;
}
inline void DisconnectRequest::set_allocated_connection(
    ::novonotes::audio_engine::v1alpha1::Connection* value)
{
    ::google::protobuf::Arena* message_arena = GetArena();
    ::google::protobuf::internal::TSanWrite(&_impl_);
    if(message_arena == nullptr)
    {
        delete(_impl_.connection_);
    }

    if(value != nullptr)
    {
        ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
        if(message_arena != submessage_arena)
        {
            value = ::google::protobuf::internal::GetOwnedMessage(
                message_arena, value, submessage_arena);
        }
        _impl_._has_bits_[0] |= 0x00000001u;
    }
    else
    {
        _impl_._has_bits_[0] &= ~0x00000001u;
    }

    _impl_.connection_ =
        reinterpret_cast<::novonotes::audio_engine::v1alpha1::Connection*>(
            value);
    // @@protoc_insertion_point(field_set_allocated:novonotes.audio_engine.v1alpha1.DisconnectRequest.connection)
}

// -------------------------------------------------------------------

// DisconnectResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace audio_engine
}  // namespace novonotes

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_novonotes_2faudio_5fengine_2fv1alpha1_2fconnection_2eproto_2epb_2eh
