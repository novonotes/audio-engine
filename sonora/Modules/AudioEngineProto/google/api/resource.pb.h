// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/api/resource.proto
// Protobuf C++ Version: 5.28.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fresource_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fresource_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/descriptor.pb.h"
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fresource_2eproto

namespace google
{
namespace protobuf
{
namespace internal
{
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fresource_2eproto
{
    static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2fapi_2fresource_2eproto;
namespace google
{
namespace api
{
class ResourceDescriptor;
struct ResourceDescriptorDefaultTypeInternal;
extern ResourceDescriptorDefaultTypeInternal
    _ResourceDescriptor_default_instance_;
class ResourceReference;
struct ResourceReferenceDefaultTypeInternal;
extern ResourceReferenceDefaultTypeInternal
    _ResourceReference_default_instance_;
}  // namespace api
namespace protobuf
{}  // namespace protobuf
}  // namespace google

namespace google
{
namespace api
{
enum ResourceDescriptor_History : int
{
    ResourceDescriptor_History_HISTORY_UNSPECIFIED = 0,
    ResourceDescriptor_History_ORIGINALLY_SINGLE_PATTERN = 1,
    ResourceDescriptor_History_FUTURE_MULTI_PATTERN = 2,
    ResourceDescriptor_History_ResourceDescriptor_History_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::min(),
    ResourceDescriptor_History_ResourceDescriptor_History_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::max(),
};

bool ResourceDescriptor_History_IsValid(int value);
extern const uint32_t ResourceDescriptor_History_internal_data_[];
constexpr ResourceDescriptor_History ResourceDescriptor_History_History_MIN =
    static_cast<ResourceDescriptor_History>(0);
constexpr ResourceDescriptor_History ResourceDescriptor_History_History_MAX =
    static_cast<ResourceDescriptor_History>(2);
constexpr int ResourceDescriptor_History_History_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ResourceDescriptor_History_descriptor();
template <typename T>
const std::string& ResourceDescriptor_History_Name(T value)
{
    static_assert(std::is_same<T, ResourceDescriptor_History>::value ||
                      std::is_integral<T>::value,
                  "Incorrect type passed to History_Name().");
    return ResourceDescriptor_History_Name(
        static_cast<ResourceDescriptor_History>(value));
}
template <>
inline const std::string& ResourceDescriptor_History_Name(
    ResourceDescriptor_History value)
{
    return ::google::protobuf::internal::NameOfDenseEnum<
        ResourceDescriptor_History_descriptor, 0, 2>(static_cast<int>(value));
}
inline bool ResourceDescriptor_History_Parse(absl::string_view name,
                                             ResourceDescriptor_History* value)
{
    return ::google::protobuf::internal::ParseNamedEnum<
        ResourceDescriptor_History>(ResourceDescriptor_History_descriptor(),
                                    name, value);
}
enum ResourceDescriptor_Style : int
{
    ResourceDescriptor_Style_STYLE_UNSPECIFIED = 0,
    ResourceDescriptor_Style_DECLARATIVE_FRIENDLY = 1,
    ResourceDescriptor_Style_ResourceDescriptor_Style_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::min(),
    ResourceDescriptor_Style_ResourceDescriptor_Style_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::int32_t>::max(),
};

bool ResourceDescriptor_Style_IsValid(int value);
extern const uint32_t ResourceDescriptor_Style_internal_data_[];
constexpr ResourceDescriptor_Style ResourceDescriptor_Style_Style_MIN =
    static_cast<ResourceDescriptor_Style>(0);
constexpr ResourceDescriptor_Style ResourceDescriptor_Style_Style_MAX =
    static_cast<ResourceDescriptor_Style>(1);
constexpr int ResourceDescriptor_Style_Style_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* ResourceDescriptor_Style_descriptor();
template <typename T>
const std::string& ResourceDescriptor_Style_Name(T value)
{
    static_assert(std::is_same<T, ResourceDescriptor_Style>::value ||
                      std::is_integral<T>::value,
                  "Incorrect type passed to Style_Name().");
    return ResourceDescriptor_Style_Name(
        static_cast<ResourceDescriptor_Style>(value));
}
template <>
inline const std::string& ResourceDescriptor_Style_Name(
    ResourceDescriptor_Style value)
{
    return ::google::protobuf::internal::NameOfDenseEnum<
        ResourceDescriptor_Style_descriptor, 0, 1>(static_cast<int>(value));
}
inline bool ResourceDescriptor_Style_Parse(absl::string_view name,
                                           ResourceDescriptor_Style* value)
{
    return ::google::protobuf::internal::ParseNamedEnum<
        ResourceDescriptor_Style>(ResourceDescriptor_Style_descriptor(), name,
                                  value);
}

// ===================================================================

// -------------------------------------------------------------------

class ResourceReference final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.api.ResourceReference) */ {
   public:
    inline ResourceReference() : ResourceReference(nullptr) {}
    ~ResourceReference() PROTOBUF_FINAL;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR ResourceReference(
        ::google::protobuf::internal::ConstantInitialized);

    inline ResourceReference(const ResourceReference& from)
        : ResourceReference(nullptr, from)
    {}
    inline ResourceReference(ResourceReference&& from) noexcept
        : ResourceReference(nullptr, std::move(from))
    {}
    inline ResourceReference& operator=(const ResourceReference& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ResourceReference& operator=(ResourceReference&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const ResourceReference& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const ResourceReference* internal_default_instance()
    {
        return reinterpret_cast<const ResourceReference*>(
            &_ResourceReference_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;
    friend void swap(ResourceReference& a, ResourceReference& b) { a.Swap(&b); }
    inline void Swap(ResourceReference* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ResourceReference* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ResourceReference* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::Message::DefaultConstruct<ResourceReference>(
            arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const ResourceReference& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const ResourceReference& from)
    {
        ResourceReference::MergeImpl(*this, from);
    }

   private:
    static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                          const ::google::protobuf::MessageLite& from_msg);

   public:
    bool IsInitialized() const { return true; }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
   private:
    static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
    static ::uint8_t* _InternalSerialize(
        const MessageLite& msg, ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream);

   public:
    ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const
    {
        return _InternalSerialize(*this, target, stream);
    }
#else   // PROTOBUF_CUSTOM_VTABLE
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(ResourceReference* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "google.api.ResourceReference";
    }

   protected:
    explicit ResourceReference(::google::protobuf::Arena* arena);
    ResourceReference(::google::protobuf::Arena* arena,
                      const ResourceReference& from);
    ResourceReference(::google::protobuf::Arena* arena,
                      ResourceReference&& from) noexcept
        : ResourceReference(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const
        PROTOBUF_FINAL;
    static const ::google::protobuf::Message::ClassDataFull _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------
    enum : int
    {
        kTypeFieldNumber = 1,
        kChildTypeFieldNumber = 2,
    };
    // string type = 1;
    void clear_type();
    const std::string& type() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_type(Arg_&& arg, Args_... args);
    std::string* mutable_type();
    PROTOBUF_NODISCARD std::string* release_type();
    void set_allocated_type(std::string* value);

   private:
    const std::string& _internal_type() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
        const std::string& value);
    std::string* _internal_mutable_type();

   public:
    // string child_type = 2;
    void clear_child_type();
    const std::string& child_type() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_child_type(Arg_&& arg, Args_... args);
    std::string* mutable_child_type();
    PROTOBUF_NODISCARD std::string* release_child_type();
    void set_allocated_child_type(std::string* value);

   private:
    const std::string& _internal_child_type() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_type(
        const std::string& value);
    std::string* _internal_mutable_child_type();

   public:
    // @@protoc_insertion_point(class_scope:google.api.ResourceReference)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 51, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_ResourceReference_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const ResourceReference& from_msg);
        ::google::protobuf::internal::ArenaStringPtr type_;
        ::google::protobuf::internal::ArenaStringPtr child_type_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_google_2fapi_2fresource_2eproto;
};
// -------------------------------------------------------------------

class ResourceDescriptor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:google.api.ResourceDescriptor) */ {
   public:
    inline ResourceDescriptor() : ResourceDescriptor(nullptr) {}
    ~ResourceDescriptor() PROTOBUF_FINAL;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR ResourceDescriptor(
        ::google::protobuf::internal::ConstantInitialized);

    inline ResourceDescriptor(const ResourceDescriptor& from)
        : ResourceDescriptor(nullptr, from)
    {}
    inline ResourceDescriptor(ResourceDescriptor&& from) noexcept
        : ResourceDescriptor(nullptr, std::move(from))
    {}
    inline ResourceDescriptor& operator=(const ResourceDescriptor& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline ResourceDescriptor& operator=(ResourceDescriptor&& from) noexcept
    {
        if(this == &from) return *this;
        if(GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
           && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
        ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const ResourceDescriptor& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const ResourceDescriptor* internal_default_instance()
    {
        return reinterpret_cast<const ResourceDescriptor*>(
            &_ResourceDescriptor_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;
    friend void swap(ResourceDescriptor& a, ResourceDescriptor& b)
    {
        a.Swap(&b);
    }
    inline void Swap(ResourceDescriptor* other)
    {
        if(other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
        if(GetArena() == other->GetArena())
        {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ResourceDescriptor* other)
    {
        if(other == this) return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    ResourceDescriptor* New(::google::protobuf::Arena* arena = nullptr) const
        PROTOBUF_FINAL
    {
        return ::google::protobuf::Message::DefaultConstruct<
            ResourceDescriptor>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const ResourceDescriptor& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const ResourceDescriptor& from)
    {
        ResourceDescriptor::MergeImpl(*this, from);
    }

   private:
    static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                          const ::google::protobuf::MessageLite& from_msg);

   public:
    bool IsInitialized() const { return true; }
    ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
   private:
    static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
    static ::uint8_t* _InternalSerialize(
        const MessageLite& msg, ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream);

   public:
    ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const
    {
        return _InternalSerialize(*this, target, stream);
    }
#else   // PROTOBUF_CUSTOM_VTABLE
    ::size_t ByteSizeLong() const final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

   private:
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(ResourceDescriptor* other);

   private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "google.api.ResourceDescriptor";
    }

   protected:
    explicit ResourceDescriptor(::google::protobuf::Arena* arena);
    ResourceDescriptor(::google::protobuf::Arena* arena,
                       const ResourceDescriptor& from);
    ResourceDescriptor(::google::protobuf::Arena* arena,
                       ResourceDescriptor&& from) noexcept
        : ResourceDescriptor(arena)
    {
        *this = ::std::move(from);
    }
    const ::google::protobuf::Message::ClassData* GetClassData() const
        PROTOBUF_FINAL;
    static const ::google::protobuf::Message::ClassDataFull _class_data_;

   public:
    ::google::protobuf::Metadata GetMetadata() const;
    // nested types ----------------------------------------------------
    using History = ResourceDescriptor_History;
    static constexpr History HISTORY_UNSPECIFIED =
        ResourceDescriptor_History_HISTORY_UNSPECIFIED;
    static constexpr History ORIGINALLY_SINGLE_PATTERN =
        ResourceDescriptor_History_ORIGINALLY_SINGLE_PATTERN;
    static constexpr History FUTURE_MULTI_PATTERN =
        ResourceDescriptor_History_FUTURE_MULTI_PATTERN;
    static inline bool History_IsValid(int value)
    {
        return ResourceDescriptor_History_IsValid(value);
    }
    static constexpr History History_MIN =
        ResourceDescriptor_History_History_MIN;
    static constexpr History History_MAX =
        ResourceDescriptor_History_History_MAX;
    static constexpr int History_ARRAYSIZE =
        ResourceDescriptor_History_History_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* History_descriptor()
    {
        return ResourceDescriptor_History_descriptor();
    }
    template <typename T>
    static inline const std::string& History_Name(T value)
    {
        return ResourceDescriptor_History_Name(value);
    }
    static inline bool History_Parse(absl::string_view name, History* value)
    {
        return ResourceDescriptor_History_Parse(name, value);
    }
    using Style = ResourceDescriptor_Style;
    static constexpr Style STYLE_UNSPECIFIED =
        ResourceDescriptor_Style_STYLE_UNSPECIFIED;
    static constexpr Style DECLARATIVE_FRIENDLY =
        ResourceDescriptor_Style_DECLARATIVE_FRIENDLY;
    static inline bool Style_IsValid(int value)
    {
        return ResourceDescriptor_Style_IsValid(value);
    }
    static constexpr Style Style_MIN = ResourceDescriptor_Style_Style_MIN;
    static constexpr Style Style_MAX = ResourceDescriptor_Style_Style_MAX;
    static constexpr int Style_ARRAYSIZE =
        ResourceDescriptor_Style_Style_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* Style_descriptor()
    {
        return ResourceDescriptor_Style_descriptor();
    }
    template <typename T>
    static inline const std::string& Style_Name(T value)
    {
        return ResourceDescriptor_Style_Name(value);
    }
    static inline bool Style_Parse(absl::string_view name, Style* value)
    {
        return ResourceDescriptor_Style_Parse(name, value);
    }

    // accessors -------------------------------------------------------
    enum : int
    {
        kPatternFieldNumber = 2,
        kStyleFieldNumber = 10,
        kTypeFieldNumber = 1,
        kNameFieldFieldNumber = 3,
        kPluralFieldNumber = 5,
        kSingularFieldNumber = 6,
        kHistoryFieldNumber = 4,
    };
    // repeated string pattern = 2;
    int pattern_size() const;

   private:
    int _internal_pattern_size() const;

   public:
    void clear_pattern();
    const std::string& pattern(int index) const;
    std::string* mutable_pattern(int index);
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_pattern(int index, Arg_&& value, Args_... args);
    std::string* add_pattern();
    template <typename Arg_ = const std::string&, typename... Args_>
    void add_pattern(Arg_&& value, Args_... args);
    const ::google::protobuf::RepeatedPtrField<std::string>& pattern() const;
    ::google::protobuf::RepeatedPtrField<std::string>* mutable_pattern();

   private:
    const ::google::protobuf::RepeatedPtrField<std::string>& _internal_pattern()
        const;
    ::google::protobuf::RepeatedPtrField<std::string>*
    _internal_mutable_pattern();

   public:
    // repeated .google.api.ResourceDescriptor.Style style = 10;
    int style_size() const;

   private:
    int _internal_style_size() const;

   public:
    void clear_style();

   public:
    ::google::api::ResourceDescriptor_Style style(int index) const;
    void set_style(int index, ::google::api::ResourceDescriptor_Style value);
    void add_style(::google::api::ResourceDescriptor_Style value);
    const ::google::protobuf::RepeatedField<int>& style() const;
    ::google::protobuf::RepeatedField<int>* mutable_style();

   private:
    const ::google::protobuf::RepeatedField<int>& _internal_style() const;
    ::google::protobuf::RepeatedField<int>* _internal_mutable_style();

   public:
    // string type = 1;
    void clear_type();
    const std::string& type() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_type(Arg_&& arg, Args_... args);
    std::string* mutable_type();
    PROTOBUF_NODISCARD std::string* release_type();
    void set_allocated_type(std::string* value);

   private:
    const std::string& _internal_type() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
        const std::string& value);
    std::string* _internal_mutable_type();

   public:
    // string name_field = 3;
    void clear_name_field();
    const std::string& name_field() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_name_field(Arg_&& arg, Args_... args);
    std::string* mutable_name_field();
    PROTOBUF_NODISCARD std::string* release_name_field();
    void set_allocated_name_field(std::string* value);

   private:
    const std::string& _internal_name_field() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_field(
        const std::string& value);
    std::string* _internal_mutable_name_field();

   public:
    // string plural = 5;
    void clear_plural();
    const std::string& plural() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_plural(Arg_&& arg, Args_... args);
    std::string* mutable_plural();
    PROTOBUF_NODISCARD std::string* release_plural();
    void set_allocated_plural(std::string* value);

   private:
    const std::string& _internal_plural() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_plural(
        const std::string& value);
    std::string* _internal_mutable_plural();

   public:
    // string singular = 6;
    void clear_singular();
    const std::string& singular() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_singular(Arg_&& arg, Args_... args);
    std::string* mutable_singular();
    PROTOBUF_NODISCARD std::string* release_singular();
    void set_allocated_singular(std::string* value);

   private:
    const std::string& _internal_singular() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_singular(
        const std::string& value);
    std::string* _internal_mutable_singular();

   public:
    // .google.api.ResourceDescriptor.History history = 4;
    void clear_history();
    ::google::api::ResourceDescriptor_History history() const;
    void set_history(::google::api::ResourceDescriptor_History value);

   private:
    ::google::api::ResourceDescriptor_History _internal_history() const;
    void _internal_set_history(::google::api::ResourceDescriptor_History value);

   public:
    // @@protoc_insertion_point(class_scope:google.api.ResourceDescriptor)
   private:
    class _Internal;
    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 73, 2>
        _table_;

    static constexpr const void* _raw_default_instance_ =
        &_ResourceDescriptor_default_instance_;

    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {
        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from,
            const ResourceDescriptor& from_msg);
        ::google::protobuf::RepeatedPtrField<std::string> pattern_;
        ::google::protobuf::RepeatedField<int> style_;
        mutable ::google::protobuf::internal::CachedSize
            _style_cached_byte_size_;
        ::google::protobuf::internal::ArenaStringPtr type_;
        ::google::protobuf::internal::ArenaStringPtr name_field_;
        ::google::protobuf::internal::ArenaStringPtr plural_;
        ::google::protobuf::internal::ArenaStringPtr singular_;
        int history_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_google_2fapi_2fresource_2eproto;
};

// ===================================================================

static const int kResourceReferenceFieldNumber = 1055;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits<
        ::google::api::ResourceReference>,
    11, false>
    resource_reference;
static const int kResourceDefinitionFieldNumber = 1053;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::FileOptions,
    ::google::protobuf::internal::RepeatedMessageTypeTraits<
        ::google::api::ResourceDescriptor>,
    11, false>
    resource_definition;
static const int kResourceFieldNumber = 1053;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::MessageTypeTraits<
        ::google::api::ResourceDescriptor>,
    11, false>
    resource;

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ResourceDescriptor

// string type = 1;
inline void ResourceDescriptor::clear_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.type)
    return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDescriptor::set_type(Arg_&& arg,
                                                                Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.type)
}
inline std::string* ResourceDescriptor::mutable_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_type();
    // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.type)
    return _s;
}
inline const std::string& ResourceDescriptor::_internal_type() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.type_.Get();
}
inline void ResourceDescriptor::_internal_set_type(const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.Set(value, GetArena());
}
inline std::string* ResourceDescriptor::_internal_mutable_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.type_.Mutable(GetArena());
}
inline std::string* ResourceDescriptor::release_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.type)
    return _impl_.type_.Release();
}
inline void ResourceDescriptor::set_allocated_type(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.type_.IsDefault())
    {
        _impl_.type_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.type)
}

// repeated string pattern = 2;
inline int ResourceDescriptor::_internal_pattern_size() const
{
    return _internal_pattern().size();
}
inline int ResourceDescriptor::pattern_size() const
{
    return _internal_pattern_size();
}
inline void ResourceDescriptor::clear_pattern()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.pattern_.Clear();
}
inline std::string* ResourceDescriptor::add_pattern()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    std::string* _s = _internal_mutable_pattern()->Add();
    // @@protoc_insertion_point(field_add_mutable:google.api.ResourceDescriptor.pattern)
    return _s;
}
inline const std::string& ResourceDescriptor::pattern(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.pattern)
    return _internal_pattern().Get(index);
}
inline std::string* ResourceDescriptor::mutable_pattern(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.pattern)
    return _internal_mutable_pattern()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ResourceDescriptor::set_pattern(int index, Arg_&& value,
                                            Args_... args)
{
    ::google::protobuf::internal::AssignToString(
        *_internal_mutable_pattern()->Mutable(index), std::forward<Arg_>(value),
        args...);
    // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.pattern)
}
template <typename Arg_, typename... Args_>
inline void ResourceDescriptor::add_pattern(Arg_&& value, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    ::google::protobuf::internal::AddToRepeatedPtrField(
        *_internal_mutable_pattern(), std::forward<Arg_>(value), args...);
    // @@protoc_insertion_point(field_add:google.api.ResourceDescriptor.pattern)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResourceDescriptor::pattern() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_list:google.api.ResourceDescriptor.pattern)
    return _internal_pattern();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResourceDescriptor::mutable_pattern() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable_list:google.api.ResourceDescriptor.pattern)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _internal_mutable_pattern();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResourceDescriptor::_internal_pattern() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.pattern_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResourceDescriptor::_internal_mutable_pattern()
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return &_impl_.pattern_;
}

// string name_field = 3;
inline void ResourceDescriptor::clear_name_field()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.name_field_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::name_field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.name_field)
    return _internal_name_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDescriptor::set_name_field(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.name_field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.name_field)
}
inline std::string* ResourceDescriptor::mutable_name_field()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_name_field();
    // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.name_field)
    return _s;
}
inline const std::string& ResourceDescriptor::_internal_name_field() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.name_field_.Get();
}
inline void ResourceDescriptor::_internal_set_name_field(
    const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.name_field_.Set(value, GetArena());
}
inline std::string* ResourceDescriptor::_internal_mutable_name_field()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.name_field_.Mutable(GetArena());
}
inline std::string* ResourceDescriptor::release_name_field()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.name_field)
    return _impl_.name_field_.Release();
}
inline void ResourceDescriptor::set_allocated_name_field(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.name_field_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.name_field_.IsDefault())
    {
        _impl_.name_field_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.name_field)
}

// .google.api.ResourceDescriptor.History history = 4;
inline void ResourceDescriptor::clear_history()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.history_ = 0;
}
inline ::google::api::ResourceDescriptor_History ResourceDescriptor::history()
    const
{
    // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.history)
    return _internal_history();
}
inline void ResourceDescriptor::set_history(
    ::google::api::ResourceDescriptor_History value)
{
    _internal_set_history(value);
    // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.history)
}
inline ::google::api::ResourceDescriptor_History
ResourceDescriptor::_internal_history() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return static_cast<::google::api::ResourceDescriptor_History>(
        _impl_.history_);
}
inline void ResourceDescriptor::_internal_set_history(
    ::google::api::ResourceDescriptor_History value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.history_ = value;
}

// string plural = 5;
inline void ResourceDescriptor::clear_plural()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plural_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::plural() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.plural)
    return _internal_plural();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDescriptor::set_plural(Arg_&& arg,
                                                                  Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plural_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.plural)
}
inline std::string* ResourceDescriptor::mutable_plural()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_plural();
    // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.plural)
    return _s;
}
inline const std::string& ResourceDescriptor::_internal_plural() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.plural_.Get();
}
inline void ResourceDescriptor::_internal_set_plural(const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plural_.Set(value, GetArena());
}
inline std::string* ResourceDescriptor::_internal_mutable_plural()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.plural_.Mutable(GetArena());
}
inline std::string* ResourceDescriptor::release_plural()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.plural)
    return _impl_.plural_.Release();
}
inline void ResourceDescriptor::set_allocated_plural(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.plural_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.plural_.IsDefault())
    {
        _impl_.plural_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.plural)
}

// string singular = 6;
inline void ResourceDescriptor::clear_singular()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.singular_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::singular() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.singular)
    return _internal_singular();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceDescriptor::set_singular(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.singular_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.singular)
}
inline std::string* ResourceDescriptor::mutable_singular()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_singular();
    // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.singular)
    return _s;
}
inline const std::string& ResourceDescriptor::_internal_singular() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.singular_.Get();
}
inline void ResourceDescriptor::_internal_set_singular(const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.singular_.Set(value, GetArena());
}
inline std::string* ResourceDescriptor::_internal_mutable_singular()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.singular_.Mutable(GetArena());
}
inline std::string* ResourceDescriptor::release_singular()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.singular)
    return _impl_.singular_.Release();
}
inline void ResourceDescriptor::set_allocated_singular(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.singular_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.singular_.IsDefault())
    {
        _impl_.singular_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.singular)
}

// repeated .google.api.ResourceDescriptor.Style style = 10;
inline int ResourceDescriptor::_internal_style_size() const
{
    return _internal_style().size();
}
inline int ResourceDescriptor::style_size() const
{
    return _internal_style_size();
}
inline void ResourceDescriptor::clear_style()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.style_.Clear();
}
inline ::google::api::ResourceDescriptor_Style ResourceDescriptor::style(
    int index) const
{
    // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.style)
    return static_cast<::google::api::ResourceDescriptor_Style>(
        _internal_style().Get(index));
}
inline void ResourceDescriptor::set_style(
    int index, ::google::api::ResourceDescriptor_Style value)
{
    _internal_mutable_style()->Set(index, value);
    // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.style)
}
inline void ResourceDescriptor::add_style(
    ::google::api::ResourceDescriptor_Style value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _internal_mutable_style()->Add(value);
    // @@protoc_insertion_point(field_add:google.api.ResourceDescriptor.style)
}
inline const ::google::protobuf::RepeatedField<int>& ResourceDescriptor::style()
    const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_list:google.api.ResourceDescriptor.style)
    return _internal_style();
}
inline ::google::protobuf::RepeatedField<int>*
ResourceDescriptor::mutable_style() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable_list:google.api.ResourceDescriptor.style)
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _internal_mutable_style();
}
inline const ::google::protobuf::RepeatedField<int>&
ResourceDescriptor::_internal_style() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.style_;
}
inline ::google::protobuf::RepeatedField<int>*
ResourceDescriptor::_internal_mutable_style()
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return &_impl_.style_;
}

// -------------------------------------------------------------------

// ResourceReference

// string type = 1;
inline void ResourceReference::clear_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.ClearToEmpty();
}
inline const std::string& ResourceReference::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:google.api.ResourceReference.type)
    return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceReference::set_type(Arg_&& arg,
                                                               Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:google.api.ResourceReference.type)
}
inline std::string* ResourceReference::mutable_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_type();
    // @@protoc_insertion_point(field_mutable:google.api.ResourceReference.type)
    return _s;
}
inline const std::string& ResourceReference::_internal_type() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.type_.Get();
}
inline void ResourceReference::_internal_set_type(const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.Set(value, GetArena());
}
inline std::string* ResourceReference::_internal_mutable_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.type_.Mutable(GetArena());
}
inline std::string* ResourceReference::release_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:google.api.ResourceReference.type)
    return _impl_.type_.Release();
}
inline void ResourceReference::set_allocated_type(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.type_.IsDefault())
    {
        _impl_.type_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:google.api.ResourceReference.type)
}

// string child_type = 2;
inline void ResourceReference::clear_child_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.child_type_.ClearToEmpty();
}
inline const std::string& ResourceReference::child_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:google.api.ResourceReference.child_type)
    return _internal_child_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResourceReference::set_child_type(
    Arg_&& arg, Args_... args)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.child_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:google.api.ResourceReference.child_type)
}
inline std::string* ResourceReference::mutable_child_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_child_type();
    // @@protoc_insertion_point(field_mutable:google.api.ResourceReference.child_type)
    return _s;
}
inline const std::string& ResourceReference::_internal_child_type() const
{
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.child_type_.Get();
}
inline void ResourceReference::_internal_set_child_type(
    const std::string& value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.child_type_.Set(value, GetArena());
}
inline std::string* ResourceReference::_internal_mutable_child_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.child_type_.Mutable(GetArena());
}
inline std::string* ResourceReference::release_child_type()
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:google.api.ResourceReference.child_type)
    return _impl_.child_type_.Release();
}
inline void ResourceReference::set_allocated_child_type(std::string* value)
{
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.child_type_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if(_impl_.child_type_.IsDefault())
    {
        _impl_.child_type_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:google.api.ResourceReference.child_type)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google

namespace google
{
namespace protobuf
{

template <>
struct is_proto_enum<::google::api::ResourceDescriptor_History> : std::true_type
{};
template <>
inline const EnumDescriptor*
GetEnumDescriptor<::google::api::ResourceDescriptor_History>()
{
    return ::google::api::ResourceDescriptor_History_descriptor();
}
template <>
struct is_proto_enum<::google::api::ResourceDescriptor_Style> : std::true_type
{};
template <>
inline const EnumDescriptor*
GetEnumDescriptor<::google::api::ResourceDescriptor_Style>()
{
    return ::google::api::ResourceDescriptor_Style_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fresource_2eproto_2epb_2eh
