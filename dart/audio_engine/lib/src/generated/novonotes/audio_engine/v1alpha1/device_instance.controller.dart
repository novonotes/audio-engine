// *********************************************************
// DO NOT EDIT THIS FILE.
// This file is generated by the audio_engine_protoc_plugin.
// Any changes to this file will be lost.
//
// template: controller_template.dart
// source: novonotes/audio_engine/v1alpha1/device_instance.proto
// *********************************************************

import 'dart:async';

import 'package:audio_engine/src/constants.dart';
import 'package:audio_engine/src/controller_request_executor.dart';
import 'package:audio_engine/src/engine_message_channel.dart';
import 'package:audio_engine/src/logger.dart';
import 'package:flutter/foundation.dart';
import 'package:nam/nam.dart';

import 'package:audio_engine/src/generated/google/protobuf/struct.pb.dart'
    as pb;
import 'device_instance.pb.dart' as pb;
import './type/body_type.pb.dart' as pb;
import './type/engine_error.pb.dart' as pb;

class DeviceInstanceController {
  final ControllerRequestExecutor _requestExecutor;

  /// EngineController のインスタンスを使わなくなった場合、このメソッドをつかってポートの close やリソース解放などの終了処理を行う
  Future<void> dispose() async {
    await _subscription.cancel();
  }

  late StreamSubscription<Message> _subscription;

  DeviceInstanceController(EngineMessageChannel channel)
      : _requestExecutor = ControllerRequestExecutor(channel) {
    _subscription =
        channel.receivedMessages.handleError((Object e, StackTrace s) {
      if (kDebugMode) {
        Logger.log(e);
        Logger.log("\n$s");
      }
    }).listen(
      (msg) {
        final body = msg.body;
        final contextStruct = pb.Struct.fromBuffer(msg.context);
        final context = contextStruct.toProto3Json() as Map<String, dynamic>;
        final requestId = (context["request-id"] as double).toInt();
        final bodyType = pb.BodyType.valueOf(msg.bodyType);
        if (bodyType == null) {
          _requestExecutor.handleError(
            Exception(
              "Engine sent a response with unsupported body type (${msg.bodyType}).",
            ),
            requestId,
          );
        }

        // Error の場合

        if (bodyType == pb.BodyType.BODY_TYPE_ENGINE_ERROR) {
          final error = pb.EngineError.fromBuffer(body);
          _requestExecutor.handleError(error, requestId);
          return;
        }

        // Response の場合
        if (bodyType == pb.BodyType.BODY_TYPE_CREATE_DEVICE_INSTANCE_RESPONSE) {
          final res = pb.CreateDeviceInstanceResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType == pb.BodyType.BODY_TYPE_DELETE_DEVICE_INSTANCE_RESPONSE) {
          final res = pb.DeleteDeviceInstanceResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType == pb.BodyType.BODY_TYPE_GET_DEVICE_INSTANCE_RESPONSE) {
          final res = pb.GetDeviceInstanceResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType ==
            pb.BodyType.BODY_TYPE_RESTORE_DEVICE_INSTANCE_STATE_RESPONSE) {
          final res = pb.RestoreDeviceInstanceStateResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType == pb.BodyType.BODY_TYPE_SET_PARAMETER_VALUE_RESPONSE) {
          final res = pb.SetParameterValueResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType ==
            pb.BodyType.BODY_TYPE_BATCH_SET_PARAMETER_VALUES_RESPONSE) {
          final res = pb.BatchSetParameterValuesResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType ==
            pb.BodyType.BODY_TYPE_EXECUTE_DEVICE_SPECIFIC_COMMAND_RESPONSE) {
          final res = pb.ExecuteDeviceSpecificCommandResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType == pb.BodyType.BODY_TYPE_START_PARAMETER_SYNC_RESPONSE) {
          final res = pb.StartParameterSyncResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }

        if (bodyType == pb.BodyType.BODY_TYPE_STOP_PARAMETER_SYNC_RESPONSE) {
          final res = pb.StopParameterSyncResponse.fromBuffer(body);
          _requestExecutor.handleResponse(res, requestId);
          return;
        }
      },
    );
  }

  Future<pb.CreateDeviceInstanceResponse> createDeviceInstance(
    pb.CreateDeviceInstanceRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.DeleteDeviceInstanceResponse> deleteDeviceInstance(
    pb.DeleteDeviceInstanceRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.GetDeviceInstanceResponse> getDeviceInstance(
    pb.GetDeviceInstanceRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.RestoreDeviceInstanceStateResponse> restoreDeviceInstanceState(
    pb.RestoreDeviceInstanceStateRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.SetParameterValueResponse> setParameterValue(
    pb.SetParameterValueRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.BatchSetParameterValuesResponse> batchSetParameterValues(
    pb.BatchSetParameterValuesRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.ExecuteDeviceSpecificCommandResponse> executeDeviceSpecificCommand(
    pb.ExecuteDeviceSpecificCommandRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.StartParameterSyncResponse> startParameterSync(
    pb.StartParameterSyncRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }

  Future<pb.StopParameterSyncResponse> stopParameterSync(
    pb.StopParameterSyncRequest req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
    return _requestExecutor.execute(
      req,
      SchemaVersion.v1alpha1,
      timeout: timeout,
    );
  }
}
