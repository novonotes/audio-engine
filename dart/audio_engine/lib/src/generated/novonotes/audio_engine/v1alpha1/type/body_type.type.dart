// ignore_for_file: curly_braces_in_flow_control_structures

// *********************************************************
// DO NOT EDIT THIS FILE.
// This file is generated by the audio_engine_protoc_plugin.
// Any changes to this file will be lost.
//
// template: body_type_template.dart
// source: novonotes/audio_engine/v1alpha1/type/body_type.proto
// *********************************************************

import './body_type.pb.dart';
import './engine_error.pb.dart';
import '../index.pb.dart';

typedef _B = BodyType;

BodyType getBodyType<T>() {
  if (T == CreateAudioRegionRequest)
    return _B.BODY_TYPE_CREATE_AUDIO_REGION_REQUEST;
  if (T == CreateAudioRegionResponse)
    return _B.BODY_TYPE_CREATE_AUDIO_REGION_RESPONSE;
  if (T == UpdateAudioRegionRequest)
    return _B.BODY_TYPE_UPDATE_AUDIO_REGION_REQUEST;
  if (T == UpdateAudioRegionResponse)
    return _B.BODY_TYPE_UPDATE_AUDIO_REGION_RESPONSE;
  if (T == DeleteAudioRegionRequest)
    return _B.BODY_TYPE_DELETE_AUDIO_REGION_REQUEST;
  if (T == DeleteAudioRegionResponse)
    return _B.BODY_TYPE_DELETE_AUDIO_REGION_RESPONSE;
  if (T == CreateTrackRequest) return _B.BODY_TYPE_CREATE_TRACK_REQUEST;
  if (T == CreateTrackResponse) return _B.BODY_TYPE_CREATE_TRACK_RESPONSE;
  if (T == UpdateTrackRequest) return _B.BODY_TYPE_UPDATE_TRACK_REQUEST;
  if (T == UpdateTrackResponse) return _B.BODY_TYPE_UPDATE_TRACK_RESPONSE;
  if (T == DeleteTrackRequest) return _B.BODY_TYPE_DELETE_TRACK_REQUEST;
  if (T == DeleteTrackResponse) return _B.BODY_TYPE_DELETE_TRACK_RESPONSE;
  if (T == ConnectRequest) return _B.BODY_TYPE_CONNECT_REQUEST;
  if (T == ConnectResponse) return _B.BODY_TYPE_CONNECT_RESPONSE;
  if (T == DisconnectRequest) return _B.BODY_TYPE_DISCONNECT_REQUEST;
  if (T == DisconnectResponse) return _B.BODY_TYPE_DISCONNECT_RESPONSE;
  if (T == DebugStateRequest) return _B.BODY_TYPE_DEBUG_STATE_REQUEST;
  if (T == DebugStateResponse) return _B.BODY_TYPE_DEBUG_STATE_RESPONSE;
  if (T == SaveStateRequest) return _B.BODY_TYPE_SAVE_STATE_REQUEST;
  if (T == SaveStateResponse) return _B.BODY_TYPE_SAVE_STATE_RESPONSE;
  if (T == CreateDeviceInstanceRequest)
    return _B.BODY_TYPE_CREATE_DEVICE_INSTANCE_REQUEST;
  if (T == CreateDeviceInstanceResponse)
    return _B.BODY_TYPE_CREATE_DEVICE_INSTANCE_RESPONSE;
  if (T == DeleteDeviceInstanceRequest)
    return _B.BODY_TYPE_DELETE_DEVICE_INSTANCE_REQUEST;
  if (T == DeleteDeviceInstanceResponse)
    return _B.BODY_TYPE_DELETE_DEVICE_INSTANCE_RESPONSE;
  if (T == InitializeRequest) return _B.BODY_TYPE_INITIALIZE_REQUEST;
  if (T == InitializeResponse) return _B.BODY_TYPE_INITIALIZE_RESPONSE;
  if (T == ShutdownRequest) return _B.BODY_TYPE_SHUTDOWN_REQUEST;
  if (T == ShutdownResponse) return _B.BODY_TYPE_SHUTDOWN_RESPONSE;
  if (T == StartPlaybackRequest) return _B.BODY_TYPE_START_PLAYBACK_REQUEST;
  if (T == StartPlaybackResponse) return _B.BODY_TYPE_START_PLAYBACK_RESPONSE;
  if (T == StopPlaybackRequest) return _B.BODY_TYPE_STOP_PLAYBACK_REQUEST;
  if (T == StopPlaybackResponse) return _B.BODY_TYPE_STOP_PLAYBACK_RESPONSE;
  if (T == UpdateTransportRequest) return _B.BODY_TYPE_UPDATE_TRANSPORT_REQUEST;
  if (T == UpdateTransportResponse)
    return _B.BODY_TYPE_UPDATE_TRANSPORT_RESPONSE;
  if (T == StartPlayheadPositionStreamRequest)
    return _B.BODY_TYPE_START_PLAYHEAD_POSITION_STREAM_REQUEST;
  if (T == StartPlayheadPositionStreamResponse)
    return _B.BODY_TYPE_START_PLAYHEAD_POSITION_STREAM_RESPONSE;
  if (T == StopPlayheadPositionStreamRequest)
    return _B.BODY_TYPE_STOP_PLAYHEAD_POSITION_STREAM_REQUEST;
  if (T == StopPlayheadPositionStreamResponse)
    return _B.BODY_TYPE_STOP_PLAYHEAD_POSITION_STREAM_RESPONSE;
  if (T == RtPlayheadPosition) return _B.BODY_TYPE_RT_PLAYHEAD_POSITION;
  if (T == PlayTestToneRequest) return _B.BODY_TYPE_PLAY_TEST_TONE_REQUEST;
  if (T == PlayTestToneResponse) return _B.BODY_TYPE_PLAY_TEST_TONE_RESPONSE;
  if (T == StartParameterSyncRequest)
    return _B.BODY_TYPE_START_PARAMETER_SYNC_REQUEST;
  if (T == StartParameterSyncResponse)
    return _B.BODY_TYPE_START_PARAMETER_SYNC_RESPONSE;
  if (T == StopParameterSyncRequest)
    return _B.BODY_TYPE_STOP_PARAMETER_SYNC_REQUEST;
  if (T == StopParameterSyncResponse)
    return _B.BODY_TYPE_STOP_PARAMETER_SYNC_RESPONSE;
  if (T == RtUpdateParameterCommand)
    return _B.BODY_TYPE_RT_UPDATE_PARAMETER_COMMAND;
  if (T == RtFinalizeParameterCommand)
    return _B.BODY_TYPE_RT_FINALIZE_PARAMETER_COMMAND;
  if (T == RtParameter) return _B.BODY_TYPE_RT_PARAMETER;
  if (T == StartRtSessionRequest) return _B.BODY_TYPE_START_RT_SESSION_REQUEST;
  if (T == StartRtSessionResponse)
    return _B.BODY_TYPE_START_RT_SESSION_RESPONSE;
  if (T == StopRtSessionRequest) return _B.BODY_TYPE_STOP_RT_SESSION_REQUEST;
  if (T == StopRtSessionResponse) return _B.BODY_TYPE_STOP_RT_SESSION_RESPONSE;
  if (T == ListDeviceDescriptorsRequest)
    return _B.BODY_TYPE_LIST_DEVICE_DESCRIPTORS_REQUEST;
  if (T == ListDeviceDescriptorsResponse)
    return _B.BODY_TYPE_LIST_DEVICE_DESCRIPTORS_RESPONSE;
  if (T == GetDeviceInstanceRequest)
    return _B.BODY_TYPE_GET_DEVICE_INSTANCE_REQUEST;
  if (T == GetDeviceInstanceResponse)
    return _B.BODY_TYPE_GET_DEVICE_INSTANCE_RESPONSE;
  if (T == SubscribeToDeviceInstanceUpdatesRequest)
    return _B.BODY_TYPE_SUBSCRIBE_TO_DEVICE_INSTANCE_UPDATES_REQUEST;
  if (T == SubscribeToDeviceInstanceUpdatesResponse)
    return _B.BODY_TYPE_SUBSCRIBE_TO_DEVICE_INSTANCE_UPDATES_RESPONSE;
  if (T == RestoreDeviceInstanceStateRequest)
    return _B.BODY_TYPE_RESTORE_DEVICE_INSTANCE_STATE_REQUEST;
  if (T == RestoreDeviceInstanceStateResponse)
    return _B.BODY_TYPE_RESTORE_DEVICE_INSTANCE_STATE_RESPONSE;
  if (T == SetParameterValueRequest)
    return _B.BODY_TYPE_SET_PARAMETER_VALUE_REQUEST;
  if (T == SetParameterValueResponse)
    return _B.BODY_TYPE_SET_PARAMETER_VALUE_RESPONSE;
  if (T == BatchSetParameterValuesRequest)
    return _B.BODY_TYPE_BATCH_SET_PARAMETER_VALUES_REQUEST;
  if (T == BatchSetParameterValuesResponse)
    return _B.BODY_TYPE_BATCH_SET_PARAMETER_VALUES_RESPONSE;
  if (T == ExecuteDeviceSpecificCommandRequest)
    return _B.BODY_TYPE_EXECUTE_DEVICE_SPECIFIC_COMMAND_REQUEST;
  if (T == ExecuteDeviceSpecificCommandResponse)
    return _B.BODY_TYPE_EXECUTE_DEVICE_SPECIFIC_COMMAND_RESPONSE;
  if (T == ResetStateRequest) return _B.BODY_TYPE_RESET_STATE_REQUEST;
  if (T == ResetStateResponse) return _B.BODY_TYPE_RESET_STATE_RESPONSE;
  if (T == EngineError) return _B.BODY_TYPE_ENGINE_ERROR;

  throw Exception("The BodyType for $T is not defined.");
}
