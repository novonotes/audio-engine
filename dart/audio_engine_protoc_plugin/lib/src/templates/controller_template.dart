import 'package:collection/collection.dart';
import 'package:dart_style/dart_style.dart';
import 'package:path/path.dart' as p;
import 'package:protoc_plugin/src/generated/descriptor.pb.dart';

import '../utils.dart';

String generateControllerDartCode(FileDescriptorProto file) {
  final intermediateData = _collectData(file);
  final buffer = StringBuffer();

  void $(String line) {
    buffer.writeln(line);
  }

  $('// *********************************************************');
  $('// DO NOT EDIT THIS FILE.');
  $('// This file is generated by the audio_engine_protoc_plugin.');
  $('// Any changes to this file will be lost.');
  $('//');
  $('// template: controller_template.dart');
  $('// source: ${intermediateData.fileName}');
  $('// *********************************************************');
  $('');

  $('import \'dart:async\';');
  $('');
  $('import \'package:audio_engine/src/constants.dart\';');
  $('import \'package:audio_engine/src/controller_request_executor.dart\';');
  $('import \'package:audio_engine/src/engine_message_channel.dart\';');
  $('import \'package:audio_engine/src/logger.dart\';');
  $('import \'package:flutter/foundation.dart\';');
  $('import \'package:nam/nam.dart\';');
  $('');
  $('import \'package:audio_engine/src/generated/google/protobuf/struct.pb.dart\' as pb;');
  $('import \'${intermediateData.basename}.pb.dart\' as pb;');
  $('import \'./type/body_type.pb.dart\' as pb;');
  $('import \'./type/engine_error.pb.dart\' as pb;');
  $('');

  $('class ${intermediateData.controllerName} {');
  $('  final ControllerRequestExecutor _requestExecutor;');
  $('');
  $('  /// EngineController のインスタンスを使わなくなった場合、このメソッドをつかってポートの close やリソース解放などの終了処理を行う');
  $('  Future<void> dispose() async {');
  $('    await _subscription.cancel();');
  $('  }');
  $('');
  $('  late StreamSubscription<Message> _subscription;');
  $('');
  $('  ${intermediateData.controllerName}(EngineMessageChannel channel)');
  $('      : _requestExecutor = ControllerRequestExecutor(channel) {');
  $('    _subscription =');
  $('      channel.receivedMessages.handleError((Object e, StackTrace s) {');
  $('      if (kDebugMode) {');
  $('        Logger.log(e);');
  $('        Logger.log("\\n\$s");');
  $('      }');
  $('    }).listen(');
  $('      (msg) {');
  $('        final body = msg.body;');
  $('        final contextStruct = pb.Struct.fromBuffer(msg.context);');
  $('        final context = contextStruct.toProto3Json() as Map<String, dynamic>;');
  $('        final requestId = (context["request-id"] as double).toInt();');
  $('        final bodyType = pb.BodyType.valueOf(msg.bodyType);');
  $('        if (bodyType == null) {');
  $('          _requestExecutor.handleError(');
  $('            Exception(');
  $('              "Engine sent a response with unsupported body type (\${msg.bodyType}).",');
  $('            ),');
  $('            requestId,');
  $('          );');
  $('        }');
  $('');
  $('        // Error の場合');
  $('');
  $('        if (bodyType == pb.BodyType.BODY_TYPE_ENGINE_ERROR) {');
  $('          final error = pb.EngineError.fromBuffer(body);');
  $('          _requestExecutor.handleError(error, requestId);');
  $('          return;');
  $('        }');
  $('');
  $('        // Response の場合');
  for (final section in intermediateData.responseHandlingSections) {
    $(section);
  }
  $('      },');
  $('    );');
  $('  }');
  $('');

  for (final method in intermediateData.methodDefinitions) {
    $(method);
    $('');
  }

  $('}');

  return DartFormatter().format(buffer.toString());
}

class _IntermediateData {
  final String fileName;
  final String basename;
  final String controllerName;
  final List<String> responseHandlingSections;
  final List<String> methodDefinitions;

  _IntermediateData({
    required this.fileName,
    required this.basename,
    required this.controllerName,
    required this.responseHandlingSections,
    required this.methodDefinitions,
  });
}

_IntermediateData _collectData(FileDescriptorProto file) {
  final pairs = _findRequestResponsePair(file);
  final basename = p.basenameWithoutExtension(file.name);
  final schemaVersion = file.package.split(".").last;
  final controllerName = "${snakeCaseToPascalCase(basename)}Controller";

  final responseHandlingSections = pairs.map((e) => '''
  if (bodyType == pb.BodyType.BODY_TYPE_${pascalCaseToSnakeCase(e.response.name)}) {
    final res = pb.${e.response.name}.fromBuffer(body);
    _requestExecutor.handleResponse(res, requestId);
    return;
  }
  ''').toList();

  final methodDefinitions = pairs.map((e) => '''
  Future<pb.${e.response.name}> ${e.toMethodName()}(
    pb.${e.request.name} req, {
    Duration timeout = defaultRequestTimeout,
  }) async {
      return _requestExecutor.execute(
      req,
      SchemaVersion.$schemaVersion,
      timeout: timeout,
    );
  }
  ''').toList();

  return _IntermediateData(
    fileName: file.name,
    basename: basename,
    controllerName: controllerName,
    responseHandlingSections: responseHandlingSections,
    methodDefinitions: methodDefinitions,
  );
}

Iterable<_RequestResponsePair> _findRequestResponsePair(
    FileDescriptorProto file) {
  final found = <_RequestResponsePair>[];
  for (final mes in file.messageType) {
    if (mes.name.endsWith("Request") && !mes.name.startsWith("Subscribe")) {
      final responseName = mes.name.replaceAll("Request", "Response");
      final responseMes = file.messageType
          .firstWhereOrNull((element) => element.name == responseName);
      if (responseMes == null) {
        continue;
      }
      found.add(_RequestResponsePair(request: mes, response: responseMes));
    }
  }
  return found;
}

class _RequestResponsePair {
  final DescriptorProto request;
  final DescriptorProto response;

  _RequestResponsePair({
    required this.request,
    required this.response,
  });

  String toMethodName() {
    return _removeRequestSuffix(lowercaseFirstLetter(request.name));
  }

  String _removeRequestSuffix(String input) {
    if (input.endsWith("Request")) {
      return input.substring(0, input.length - "Request".length);
    }
    return input;
  }
}
