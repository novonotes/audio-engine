import 'package:collection/collection.dart';
import 'package:dart_style/dart_style.dart';
import 'package:path/path.dart';
import 'package:protoc_plugin/src/generated/descriptor.pb.dart';

import '../utils.dart';

String generateBodyTypeDartCode(FileDescriptorProto file) {
  final intermediateData = _collectData(file);
  final buffer = StringBuffer();

  void $(String line) {
    buffer.writeln(line);
  }

  $('// ignore_for_file: curly_braces_in_flow_control_structures');
  $('');
  $('// *********************************************************');
  $('// DO NOT EDIT THIS FILE.');
  $('// This file is generated by the audio_engine_protoc_plugin.');
  $('// Any changes to this file will be lost.');
  $('//');
  $('// template: body_type_template.dart');
  $('// source: ${intermediateData.fileName}');
  $('// *********************************************************');
  $('');

  $("import './${basenameWithoutExtension(intermediateData.fileName)}.pb.dart';");
  $("import './engine_error.pb.dart';");
  $("import '../index.pb.dart';");
  $('');

  $('typedef _B = BodyType;');
  $('');

  $('BodyType getBodyType<T>() {');
  for (final statement in intermediateData.ifStatements) {
    $('  $statement');
  }
  $('');
  $('  throw Exception("The BodyType for \$T is not defined.");');
  $('}');

  return DartFormatter().format(buffer.toString());
}

class _IntermediateData {
  final String fileName;
  final List<String> ifStatements;

  _IntermediateData({
    required this.fileName,
    required this.ifStatements,
  });
}

_IntermediateData _collectData(FileDescriptorProto file) {
  final bodyTypeEnum =
      file.enumType.firstWhereOrNull((element) => element.name == "BodyType");
  if (bodyTypeEnum == null) {
    throw Exception(
      "The 'BodyType' enum type is not defined in ${file.name}.",
    );
  }

  final ifStatements = bodyTypeEnum.value
      .where((element) => element.name != "BODY_TYPE_HANDSHAKE")
      .map((e) =>
          "if (T == ${snakeCaseToPascalCase(e.name).removeBodyTypePrefix()}) return _B.${e.name};")
      .toList();

  return _IntermediateData(
    fileName: file.name,
    ifStatements: ifStatements,
  );
}

extension _RemoveBodyTypePrefix on String {
  String removeBodyTypePrefix() {
    return replaceFirst(RegExp(r'^BodyType'), '');
  }
}
